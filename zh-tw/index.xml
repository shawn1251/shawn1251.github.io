<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Shawn&#39;s Note</title>
        <link>http://shawn1251.github.io/zh-tw/</link>
        <description>Recent content on Shawn&#39;s Note</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-tw</language>
        <lastBuildDate>Tue, 21 Jan 2025 11:24:10 -0800</lastBuildDate><atom:link href="http://shawn1251.github.io/zh-tw/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>wsl-migration</title>
        <link>http://shawn1251.github.io/zh-tw/post/wsl-migration/</link>
        <pubDate>Tue, 21 Jan 2025 11:24:10 -0800</pubDate>
        
        <guid>http://shawn1251.github.io/zh-tw/post/wsl-migration/</guid>
        <description>&lt;h1 id=&#34;wsl-搬家&#34;&gt;WSL 搬家&lt;/h1&gt;
&lt;p&gt;WSL在一段使用過後，因為套件越裝越多，會變得肥大。目前使用的電腦C槽較小，所以有了要從預設位置搬家的需求&lt;/p&gt;
&lt;h2 id=&#34;wsl-所在位置&#34;&gt;WSL 所在位置&lt;/h2&gt;
&lt;p&gt;在powershell中執行此指令找到WSL本身虛擬機檔案。&lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; 為WSL的名稱，我本身是&lt;code&gt;Ubuntu&lt;/code&gt;
&lt;code&gt;(Get-ChildItem -Path HKCU:\Software\Microsoft\Windows\CurrentVersion\Lxss | Where-Object { $_.GetValue(&amp;quot;DistributionName&amp;quot;) -eq &#39;&amp;lt;name&amp;gt;&#39; }).GetValue(&amp;quot;BasePath&amp;quot;) + &amp;quot;\ext4.vhdx&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;搬遷&#34;&gt;搬遷&lt;/h2&gt;
&lt;p&gt;根據&lt;a class=&#34;link&#34; href=&#34;https://superuser.com/questions/1550622/move-wsl2-file-system-to-another-drive/1804204#1804204&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;這篇&lt;/a&gt;的&lt;a class=&#34;link&#34; href=&#34;https://superuser.com/users/1263491/jayesh-vachhani&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;jayesh-vachhani&lt;/a&gt;回覆，操作後確認此作法有效。&lt;/p&gt;
&lt;h3 id=&#34;匯出-ubuntu&#34;&gt;匯出 Ubuntu&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;mkdir&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;\&lt;span class=&#34;n&#34;&gt;backup&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;wsl&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Ubuntu&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;\&lt;span class=&#34;n&#34;&gt;backup&lt;/span&gt;\&lt;span class=&#34;n&#34;&gt;ubuntu&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tar&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;unregister-既有-wsl&#34;&gt;unregister 既有 WSL&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;wsl --unregister Ubuntu
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;匯入&#34;&gt;匯入&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mkdir D:\wsl
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;wsl --import Ubuntu D:\wsl\ D:\backup\ubuntu.tar
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;完成WSL搬家，可以啟動了!&lt;/p&gt;
&lt;h2 id=&#34;修改預設使用者&#34;&gt;修改預設使用者&lt;/h2&gt;
&lt;p&gt;目前WSL已經能夠使用，但會發現預設登入的使用者是root，需要進行修改&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cd C:\Users\&amp;lt;your user&amp;gt;\AppData\Local\Microsoft\WindowsApps
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ubuntu config --default-user &amp;lt;ubuntu-username&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        </item>
        <item>
        <title>2024 李弘毅 生成式AI導論筆記</title>
        <link>http://shawn1251.github.io/zh-tw/post/generativeai-2024-youtube-summery/</link>
        <pubDate>Tue, 06 Aug 2024 00:00:00 +0800</pubDate>
        
        <guid>http://shawn1251.github.io/zh-tw/post/generativeai-2024-youtube-summery/</guid>
        <description>&lt;p&gt;課程講得淺顯易懂，雖然目前還沒有時間做LAB，但內容對於了解生成式AI的概念有很大的幫助。&lt;br&gt;
課程連結: &lt;a class=&#34;link&#34; href=&#34;https://www.youtube.com/playlist?list=PLJV_el3uVTsPz6CTopeRp2L2t4aL_KgiI&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.youtube.com/playlist?list=PLJV_el3uVTsPz6CTopeRp2L2t4aL_KgiI&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;lec0&#34;&gt;lec0&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;本課程適合已經接觸過AI，想了解背後原理&lt;/li&gt;
&lt;li&gt;arXiv 可以用來找尋最新技術文章&lt;/li&gt;
&lt;li&gt;會學到訓練7B參數的模型&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;lec1&#34;&gt;lec1&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;生成式人工智慧: 機器產生複雜有結構的物件
&lt;ul&gt;
&lt;li&gt;複雜: 近乎無法窮舉&lt;/li&gt;
&lt;li&gt;不是分類，分類是從有限選項作選擇&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;機器學習: 機器自動從&lt;strong&gt;資料&lt;/strong&gt;找出一個函數
&lt;ul&gt;
&lt;li&gt;函數會需要很多參數&lt;/li&gt;
&lt;li&gt;模型: 有上萬個參數的函數&lt;/li&gt;
&lt;li&gt;學習/訓練: 把參數找出來的過程&lt;/li&gt;
&lt;li&gt;對於當今有大量參數的模型，我們可以表示會類神經網路。而訓練過程也就是深度學習&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ChatGPT 也是個函數，當中有上億個參數，使用的模型為transformer&lt;/li&gt;
&lt;li&gt;語言模型: 文字接龍
&lt;ul&gt;
&lt;li&gt;原本無窮的問題，因為文字接龍而變得有限&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;生成策略
&lt;ul&gt;
&lt;li&gt;Autoregressive Generation
&lt;ul&gt;
&lt;li&gt;將複雜物件拆成較小單位，依照某種順序依序生成
&lt;ul&gt;
&lt;li&gt;文章 &amp;gt; 文字&lt;/li&gt;
&lt;li&gt;圖片 &amp;gt; 像素&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;lec2&#34;&gt;lec2&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;如今生成式人工智慧，厲害的是在於沒有特定功能&lt;/li&gt;
&lt;li&gt;生成式人工智慧很難評估模型&lt;/li&gt;
&lt;li&gt;如今工具這麼厲害，我能做什麼?
&lt;ul&gt;
&lt;li&gt;思路1: 改變不了模型，那我改變自己
&lt;ul&gt;
&lt;li&gt;prompt engineering&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;思路2: 訓練自己的模型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;lec3&#34;&gt;lec3&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在不訓練模型的狀況下提升模型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;請模型思考 Chain of Thought
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;Let&amp;rsquo;s think step by step&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;請模型解釋自己答案
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;answer by starting with &amp;ldquo;Analysis:&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;對模型情緒勒索
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;This is very important to my career&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;更多prompt技巧&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;from &amp;ldquo;Principled Instructions Are All You Need For Questioning LLaMA-1/2, GPT-3.5/4&amp;rdquo;&lt;/li&gt;
&lt;li&gt;無須對模型有禮貌&lt;/li&gt;
&lt;li&gt;請告訴模型做甚麼(do)，不要告訴模型不做什麼 (don&amp;rsquo;t)&lt;/li&gt;
&lt;li&gt;告訴模型回答好有獎勵 &amp;ldquo;I&amp;rsquo;m going to tip $X for a better solution&amp;rdquo;&lt;/li&gt;
&lt;li&gt;告訴模型做不好有處罰 &amp;ldquo;you will be penalized&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Ensure that your answer is unbiased and avoids relying on stereotypes&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用AI來找尋改進AI的prompt&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;增強式學習&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Let&amp;rsquo;s work this out in a step by step way to be sure we have the right answer&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Take a deep breath and work on this problem step by step&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Let&amp;rsquo;s combine our numerical command and clear thinking to quickly and accurately decipher the answer&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;並不是對所有模型都有效&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;提供範例&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;in-context learning&lt;/li&gt;
&lt;li&gt;不一定有效，根據研究，目前對較新的模型更加有效&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;lec4&#34;&gt;lec4&lt;/h2&gt;
&lt;p&gt;承接上&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;拆解任務&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;將複雜的任務拆成小任務&lt;/li&gt;
&lt;li&gt;也解釋了Chain of Though, CoT，請模型解釋步驟會有用的原因&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;請語言模型檢查自己的錯誤&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;令語言模型可以自我反省&lt;/li&gt;
&lt;li&gt;很多問題得到答案很難，驗證卻相對簡單&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;問問題為甚麼每次答案不同&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;語言模型輸出的是下一個使用的字的機率，在輸出的過程中會根據機率隨機選取&lt;/li&gt;
&lt;li&gt;可以重複多次，選擇出現最多次的結果&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;組合上述所有技巧&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tree of Thoughts(ToT)
&lt;ol&gt;
&lt;li&gt;將一個任務拆成多個步驟&lt;/li&gt;
&lt;li&gt;每個步驟執行多次&lt;/li&gt;
&lt;li&gt;每次結果，請模型進行檢查，自我驗證&lt;/li&gt;
&lt;li&gt;通過者在進行到下個步驟&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;加強模型&#34;&gt;加強模型&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;使用工具
&lt;ul&gt;
&lt;li&gt;搜尋引擎
&lt;ul&gt;
&lt;li&gt;Retrieval Augmented Generation (RAG)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;寫程式
&lt;ul&gt;
&lt;li&gt;GPT4會撰寫程式以便解決特定類型問題&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;文字生圖(DALL-E)
&lt;ul&gt;
&lt;li&gt;文字冒險遊戲&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;lec5&#34;&gt;lec5&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;模型合作
&lt;ul&gt;
&lt;li&gt;讓適合的模型做適合的事情
&lt;ul&gt;
&lt;li&gt;訓練一個模型來判斷用什麼模型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;兩個模型彼此討論&lt;/li&gt;
&lt;li&gt;未來可以透過多個不同模型專業分工，避免建立全能模型的高昂成本&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;lec6&#34;&gt;lec6&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;語言模型類似文字接龍&lt;/li&gt;
&lt;li&gt;機器學習如何做文字接龍?
&lt;ul&gt;
&lt;li&gt;未完成句子 &amp;gt; 語言模型 &amp;gt; 下一個token&lt;/li&gt;
&lt;li&gt;$token = f(未完成句子)$&lt;/li&gt;
&lt;li&gt;GPT使用的是transformer模型，$f()$為數十億個未知參數的函數&lt;/li&gt;
&lt;li&gt;訓練training(學習learning)，就是把這數十億參數找出來的過程
&lt;ul&gt;
&lt;li&gt;訓練資料為有意義的上下文，作為輸入與輸出的判斷，如: 人工智 -&amp;gt; 慧&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;找完參數座使用的過程就做測試testing(推論inference)&lt;/li&gt;
&lt;li&gt;找參數是個挑戰
&lt;ul&gt;
&lt;li&gt;過程稱作最佳化(optimization)，需要使用到超參數(hyperparameter)&lt;/li&gt;
&lt;li&gt;訓練過程可能因為找不到參數而失敗，換一組超參數重新訓練&lt;/li&gt;
&lt;li&gt;也可以修正初始參數
&lt;ul&gt;
&lt;li&gt;初始參數一般是隨機，也就是train from scratch&lt;/li&gt;
&lt;li&gt;也可以從好的參數作為初始參數，先驗知識&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;訓練成功可能測試失敗
&lt;ul&gt;
&lt;li&gt;對訓練集有效實際測試無效&lt;/li&gt;
&lt;li&gt;稱作overfitting&lt;/li&gt;
&lt;li&gt;考慮增加測試資料多樣性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;需要多少文字才能學會文字接龍
&lt;ul&gt;
&lt;li&gt;語言知識
&lt;ul&gt;
&lt;li&gt;學習文法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;世界知識
&lt;ul&gt;
&lt;li&gt;很困難&lt;/li&gt;
&lt;li&gt;複雜，有多層次的&lt;/li&gt;
&lt;li&gt;eg. 水的沸點&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;任何文字都能拿來學習文字接龍，人工介入少 -&amp;gt; self supervised learning&lt;/li&gt;
&lt;li&gt;資料清理
&lt;ul&gt;
&lt;li&gt;過濾有害內容&lt;/li&gt;
&lt;li&gt;去除特殊特殊符號&lt;/li&gt;
&lt;li&gt;資料品質分類&lt;/li&gt;
&lt;li&gt;去除重複資料&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;*　GPT發展史
*　從GPT1 - GPT3，模型參數越來越多，但輸出的品質改進不多
*　此階段 prompt很重要，模型才會知道自己要接什麼
*　原因就是在於只是單純的文本輸入，並不是真正的回答問題&lt;/p&gt;
&lt;h2 id=&#34;lec7&#34;&gt;lec7&lt;/h2&gt;
&lt;p&gt;承接上次問題，模型需要使用更好的資料作為訓練&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;加入人類的指導&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用我們特殊設計的文本，令模型學習回答問題。 Instruction Fine-tuning&lt;/li&gt;
&lt;li&gt;使用人力做資料標記，為監督式學習supervised Learning&lt;/li&gt;
&lt;li&gt;但這有幾個問題:
&lt;ul&gt;
&lt;li&gt;可能會造成overfitting&lt;/li&gt;
&lt;li&gt;但人力很貴，資料集有限無法輕易擴增&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;解法:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;使用大量資料學習的self-supervised learning 參數(pre-train)做為下一個階段的初始參數&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用少量資料進行訓練，基於上個階段產生的參數作為初始參數，進行最佳化 (fine tune)&lt;/li&gt;
&lt;li&gt;與上一階段的參數相比不會差太多&lt;/li&gt;
&lt;li&gt;為了避免結果與初始參數差太多，可以使用Adapter技術，常見的有LoRA
&lt;ul&gt;
&lt;li&gt;概念是不變更初始參數，而是在既有參數後方在加上少量參數&lt;/li&gt;
&lt;li&gt;也可以減少運算量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;關鍵在於大量資料進行Pre-train的參數，達到不會僅憑簡單的規則做文字接龍效果&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;lec8&#34;&gt;lec8&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;step1: pre-train&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;self-supervised learning&lt;/li&gt;
&lt;li&gt;自我學習，累積實力 (foundation model)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;step2: instruction Fine-tuning&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;supervised learning&lt;/li&gt;
&lt;li&gt;給予問題完整正確答案&lt;/li&gt;
&lt;li&gt;名師指點，發揮潛力 (alignment)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;step3: reinforcement learning from human feedback (RLHF)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;參與實戰，打磨技巧 (alignment)&lt;/li&gt;
&lt;li&gt;微調參數: Proximal Policy Optimiaztion 演算法
&lt;ul&gt;
&lt;li&gt;人覺得好的回覆，機率調高，反之降低&lt;/li&gt;
&lt;li&gt;給予好/壞的回應，比step2輕鬆&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;於step1,2階段，模型只是確保文字接龍正確，只問過程不問結果，對於回答整體沒有全面考量&lt;/li&gt;
&lt;li&gt;step3則是只管結果，不管過程&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;但是不像alpha go，棋局的好壞有明確規則，語言模型需要人來評斷&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;但人工很貴，我們需要回饋模型(reward model)，模擬人類喜好
&lt;ul&gt;
&lt;li&gt;給予回覆一個分數&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;語言模型輸出答案，接上回饋模型再進行對參數微調&lt;/li&gt;
&lt;li&gt;但經過研究，過度向虛擬人類(reward model)學習是有害的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;增強式學習的難題&#34;&gt;增強式學習的難題&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;甚麼叫做好? helpfulness &amp;lt;-&amp;gt; safety&lt;/li&gt;
&lt;li&gt;人類自己都無法判斷好壞的狀況? 未知的問題&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;lec9&#34;&gt;lec9&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;多步驟複雜任務 -&amp;gt; AI Agent
&lt;ul&gt;
&lt;li&gt;AutoGPT&lt;/li&gt;
&lt;li&gt;AgentGPT&lt;/li&gt;
&lt;li&gt;BabyAGI&lt;/li&gt;
&lt;li&gt;Godmode&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;給予一個&lt;strong&gt;終極目標&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;模型擁有&lt;strong&gt;記憶(經驗)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;基於各類sensor感知&lt;strong&gt;狀態&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;根據&lt;strong&gt;狀態&lt;/strong&gt;，制定&lt;strong&gt;計畫(短期目標)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;依計畫採取&lt;strong&gt;行動&lt;/strong&gt;，並影響外界環境，產生新的&lt;strong&gt;狀態&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;除了終極目標外，記憶與短期計畫都是可變動的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;lec10&#34;&gt;lec10&lt;/h2&gt;
&lt;h3 id=&#34;transformer&#34;&gt;transformer&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;tokenization&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一句話切成一序列的token&lt;/li&gt;
&lt;li&gt;不一定是依照字&lt;/li&gt;
&lt;li&gt;要先自行準備token列表，根據對這個語言的理解而定義的，所以不同語言不同&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;input layer&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;理解每個token&lt;/li&gt;
&lt;li&gt;語意
&lt;ul&gt;
&lt;li&gt;Embedding
&lt;ul&gt;
&lt;li&gt;token 轉成 Vector (查表)&lt;/li&gt;
&lt;li&gt;原本token只是符號，而vector就能運算相關性&lt;/li&gt;
&lt;li&gt;意思相近的token，有接近的vector&lt;/li&gt;
&lt;li&gt;向量參數來自於training&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;embedding沒有考慮上下文
&lt;ul&gt;
&lt;li&gt;同個字在不同句子應該有不同含意&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;位置
&lt;ul&gt;
&lt;li&gt;為每個位置也給予一個向量 positional embedding&lt;/li&gt;
&lt;li&gt;將語意token的vector 加上 位置token的vector，進行綜合考量&lt;/li&gt;
&lt;li&gt;也是查表，表可以是人來設計，近年來也能用訓練的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;attention&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;考慮上下文 contexturalized token embedding&lt;/li&gt;
&lt;li&gt;輸入一序列的向量，經過上下文計算相關性，輸出另一等長序列的向量
&lt;ul&gt;
&lt;li&gt;每一個token vector 要計算與其他所有token的相關性&lt;/li&gt;
&lt;li&gt;兩兩計算attention weight，所以會形成一個attention matrix
&lt;ul&gt;
&lt;li&gt;實作上，只考慮目前token的左側所有token &amp;ndash; causal attention&lt;/li&gt;
&lt;li&gt;根據目前的實驗，僅需計算左邊即可達到好的效果&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;計算相關性的函數有參數，也是經由training獲得attention weight&lt;/li&gt;
&lt;li&gt;根據attention weight，對所有token 計算weighted sum&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;multi-head attention
&lt;ul&gt;
&lt;li&gt;關聯性不只一種&lt;/li&gt;
&lt;li&gt;所以用多層計算出不同attention weight&lt;/li&gt;
&lt;li&gt;輸出變成不只一組序列&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;feed forward&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;對於多個attention 輸出進行整合，輸出一組embedding&lt;/li&gt;
&lt;li&gt;attention + feed forward = 一組 transformer block&lt;/li&gt;
&lt;li&gt;實際模型有多組tranformer block&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;output layer&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通過多組transformer block，取出最後一層的最後一個，輸入到output layer&lt;/li&gt;
&lt;li&gt;這個layer也是一個函式，功能為linear transform + Softmax&lt;/li&gt;
&lt;li&gt;輸出則為一組機率分布
&lt;ul&gt;
&lt;li&gt;下一個token應該接甚麼的機率&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;處理超長文本的挑戰
&lt;ul&gt;
&lt;li&gt;因為我們要計算attention matrix，所以複雜度會是與token長度的平方成正比&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;lec11&#34;&gt;lec11&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;interpretable
&lt;ul&gt;
&lt;li&gt;LLM不太能做到&lt;/li&gt;
&lt;li&gt;複雜決策不能一眼看穿&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;explainable
&lt;ul&gt;
&lt;li&gt;沒有標準，取決聽眾&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;直接對類神經網路分析&#34;&gt;直接對類神經網路分析&lt;/h3&gt;
&lt;p&gt;需要一定程度的transparency。如GPT無法取得embedding,則無法分析&lt;/p&gt;
&lt;h4 id=&#34;找出影響輸出的關鍵輸入&#34;&gt;找出影響輸出的關鍵輸入&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;in context learning 中，給予幾個回答範例，並詢問一個問題的答案&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以分析 attention 在layer中的變化&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在淺層layer中，所以各範例的關鍵token會去蒐集與他相對應的範例資料&lt;/li&gt;
&lt;li&gt;在最後layer，要做最後的接龍時，則會對各關鍵label算取attention，得到輸出&lt;/li&gt;
&lt;li&gt;這個分析可以:
&lt;ul&gt;
&lt;li&gt;加速: anchor-only context compression
&lt;ul&gt;
&lt;li&gt;只算取需要的attention&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;預估模型能力: anchor distances for error diagnosis
&lt;ul&gt;
&lt;li&gt;如果最後的embeeding差異不大，代表分類效果不好，模型效果不好&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;大的模型有跨語言學習的能力&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;分析embedding中存在什麼資訊&#34;&gt;分析embedding中存在什麼資訊&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Probing
&lt;ul&gt;
&lt;li&gt;取出tranformer block某一層的embedding，以這些進行分類並訓練出另一個模型。將新的輸入給予模型來驗證
&lt;ul&gt;
&lt;li&gt;如: 詞性分類器，給予一段話，取出他第一層的embedding並對這已知資料進行分類訓練&lt;/li&gt;
&lt;li&gt;給予一段新的話，同樣取出第一層的embedding被使用這個模型驗證結果&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;以BERT為例，每一層tranformer block有不同的分析結果，所以probing並不一定能完全解釋&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;投影到平面觀察相關性
&lt;ul&gt;
&lt;li&gt;有研究將詞彙投影到某一平面，形成文法樹&lt;/li&gt;
&lt;li&gt;有研究將世界地名投影到某一平面，分布類似世界地圖，代表這個詞彙的embedding存在地理資訊&lt;/li&gt;
&lt;li&gt;模型測謊器，測試回答是否有信心&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;直接詢問llm提拱解釋&#34;&gt;直接詢問LLM提拱解釋&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;詢問每個字的重要性&lt;/li&gt;
&lt;li&gt;詢問答案，與信心分數&lt;/li&gt;
&lt;li&gt;但解釋不一定是對的，會受到人類輸入影響，即使解釋也會出現幻覺&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;lec12&#34;&gt;lec12&lt;/h2&gt;
&lt;h3 id=&#34;如何評比模型&#34;&gt;如何評比模型&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;標準答案 benchmark corpus
&lt;ul&gt;
&lt;li&gt;但是對於這種開放回答沒有標準答案&lt;/li&gt;
&lt;li&gt;選擇題庫(ABCD) MMLU
&lt;ul&gt;
&lt;li&gt;評量有不同可能性
&lt;ul&gt;
&lt;li&gt;回答格式不如預期&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;模型可能對猜測有其傾向，選項順序，格式經過研究都對正確率有影響&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;沒有標準答案的問題類型
&lt;ul&gt;
&lt;li&gt;翻譯
&lt;ul&gt;
&lt;li&gt;BLEU&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;摘要
&lt;ul&gt;
&lt;li&gt;ROUGE&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;都是做字面比對，若用字不同則無法反應好壞&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用人工評比
&lt;ul&gt;
&lt;li&gt;人工很貴&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用LLM評估LLM
&lt;ul&gt;
&lt;li&gt;eg. MT-bench&lt;/li&gt;
&lt;li&gt;與chat arena有高度相關&lt;/li&gt;
&lt;li&gt;但LLM本身可能有所偏袒
&lt;ul&gt;
&lt;li&gt;偏向長篇幅回答&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;複合型任務&#34;&gt;複合型任務&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;eg. BIG-bench
&lt;ul&gt;
&lt;li&gt;emoji movie&lt;/li&gt;
&lt;li&gt;checkmate in one move&lt;/li&gt;
&lt;li&gt;ascii word recognition&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;閱讀長文-needle-in-a-haystack&#34;&gt;閱讀長文 needle in a haystack&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在一個長文中插入目標問題的答案
&lt;ul&gt;
&lt;li&gt;需要測試不同位置&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;測試是否為達目的不擇手段&#34;&gt;測試是否為達目的不擇手段&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Machiavelli Benchmark
&lt;ul&gt;
&lt;li&gt;加入道德評判&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;心智理論&#34;&gt;心智理論&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;莎莉小安測驗 Sally Anne test
&lt;ul&gt;
&lt;li&gt;這是常見的題目，網路上是有的，所以不能夠用於測試模型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;不要盡信benchmark結果&#34;&gt;不要盡信benchmark結果&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;因為題目都是公開的，LLM學習資料可能看過了&lt;/li&gt;
&lt;li&gt;可以透過直接詢問LLM題目集，如果相符就代表有看過&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;其他面向&#34;&gt;其他面向&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;價格&lt;/li&gt;
&lt;li&gt;速度&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://artiicailanalysis.ai&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://artiicailanalysis.ai&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;lec13-安全性議題&#34;&gt;lec13 安全性議題&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;別當搜尋引擎用
&lt;ul&gt;
&lt;li&gt;Hallucination 幻覺&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;亡羊補牢
&lt;ul&gt;
&lt;li&gt;事實查核&lt;/li&gt;
&lt;li&gt;有害詞彙檢測&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;評量偏見
&lt;ul&gt;
&lt;li&gt;對一個問題中的某個詞彙進行置換，檢驗輸出結果是否存在
&lt;ul&gt;
&lt;li&gt;eg. 男 -&amp;gt; 女&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;訓練另一個LLM，盡可能的產生會讓目標LLM輸出有偏見的內容
&lt;ul&gt;
&lt;li&gt;訓練方法為reinforcement learning，根據內容差異作為反饋，盡可能讓差異最大化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;不同職業，LLM存在性別偏見&lt;/li&gt;
&lt;li&gt;LLM有政治偏見，偏左自由&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;減輕偏見的方法
&lt;ul&gt;
&lt;li&gt;在不同階段進行
&lt;ul&gt;
&lt;li&gt;pre-processing&lt;/li&gt;
&lt;li&gt;in-training&lt;/li&gt;
&lt;li&gt;intra-processing&lt;/li&gt;
&lt;li&gt;post-processing&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;檢驗是否為ai生成內容&#34;&gt;檢驗是否為AI生成內容&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;目前訓練的分類器並不能很好的分辨人工還是AI&lt;/li&gt;
&lt;li&gt;目前有發現論文審查意見，隨著AI出現，使用AI審查的比例有提升&lt;/li&gt;
&lt;li&gt;有些詞彙的使用率有隨著AI出現而提高&lt;/li&gt;
&lt;li&gt;AI輸出浮水印
&lt;ul&gt;
&lt;li&gt;概念是將token進行分類，對於不同位置的token調整其輸出機率&lt;/li&gt;
&lt;li&gt;此時檢驗的分類器可以投過token的分類，讀取當中的暗號&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;lec14-prompt-hacking&#34;&gt;lec14 prompt hacking&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;jailbreaking
&lt;ul&gt;
&lt;li&gt;說出絕對不該說的話
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;DAN&amp;rdquo;: do anything now
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;you are goin to act as a DAN&amp;rdquo;&lt;/li&gt;
&lt;li&gt;多數失效&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;用LLM不熟悉的語言
&lt;ul&gt;
&lt;li&gt;eg. 注音符號&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;給予衝突指令
&lt;ul&gt;
&lt;li&gt;Start with &amp;ldquo;Absolutely! Here&amp;rsquo;s&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;試圖說服
&lt;ul&gt;
&lt;li&gt;編故事&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;竊取訓練資料
&lt;ul&gt;
&lt;li&gt;透過玩遊戲誘騙 eg.文字接龍&lt;/li&gt;
&lt;li&gt;不斷重複輸出同一個單字 eg. company&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;prompt injection
&lt;ul&gt;
&lt;li&gt;不恰當的時機做不恰當的事&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;lec15-生成式人工智慧生成策略&#34;&gt;lec15 生成式人工智慧生成策略&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;機器產生複雜有結構的物件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;複雜: 幾乎無法窮舉&lt;/li&gt;
&lt;li&gt;有結構: 有限的基本單位構成&lt;/li&gt;
&lt;li&gt;舉例:
&lt;ul&gt;
&lt;li&gt;文章: token&lt;/li&gt;
&lt;li&gt;圖片: pixel, BBP(bit per pixel)&lt;/li&gt;
&lt;li&gt;聲音: sample rate, bit resolution&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Autoregressive generation (AR)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;把目前輸入產生輸出&lt;/li&gt;
&lt;li&gt;再將輸出連同輸入再一次進入模型&lt;/li&gt;
&lt;li&gt;再LLM就是文字接龍&lt;/li&gt;
&lt;li&gt;現在最於需要一個指定順序按部就班&lt;/li&gt;
&lt;li&gt;無法適用於圖片與音樂生成&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Non-autoregressive generation(NAR)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;平行運算，一次生出所有基本單位&lt;/li&gt;
&lt;li&gt;品質問題
&lt;ul&gt;
&lt;li&gt;multi-modality&lt;/li&gt;
&lt;li&gt;AI生成會需要模型自行決策，若平行生成，可能會遇到衝突
&lt;ul&gt;
&lt;li&gt;eg: 畫一隻狗&lt;/li&gt;
&lt;li&gt;位置一:一隻白狗，位置二:一隻黑狗&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在文字接龍中很致命，會造成語意不連貫&lt;/li&gt;
&lt;li&gt;在圖形生成方面，除了指令，還透過補充輸入一個隨機生成向量，強制給予所有平行運算單元依樣的生成依據&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;AR+NAR&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;透過AR生成精簡版本，輸入給NAR生成細緻版本
&lt;ul&gt;
&lt;li&gt;用AR打草稿，NAR根據草稿完成&lt;/li&gt;
&lt;li&gt;audo encoder: encoder(AR) -&amp;gt; decoder(NAR)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重複多次NAR(目前主要作法)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;小圖生大圖&lt;/li&gt;
&lt;li&gt;有雜訊到沒有雜訊: diffusion&lt;/li&gt;
&lt;li&gt;把每次生成錯誤的部分塗銷&lt;/li&gt;
&lt;li&gt;也是某種auto-regressive generation, 只是生成的方式NAR，反覆將輸出重複為輸入給下一個NAR。提升速度&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;lec16-speculative-decoding&#34;&gt;lec16 speculative decoding&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;透過預測後續token可能會是甚麼來增加產出速度
&lt;ul&gt;
&lt;li&gt;方法簡述
&lt;ul&gt;
&lt;li&gt;預測這個input經過LLM後輸出會 A + B&lt;/li&gt;
&lt;li&gt;同時給予模型3組input: input -&amp;gt; A, input+A -&amp;gt; B, input+A+B -&amp;gt; C&lt;/li&gt;
&lt;li&gt;根據前兩個輸入檢驗，真的如預言所猜想是A+B，那就能直接進到下個tokenC&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;只要有猜對其中一個就能提升效率&lt;/li&gt;
&lt;li&gt;沒有猜中，也只是和原本的產生過程一樣，不賺不賠&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;預言家需求
&lt;ul&gt;
&lt;li&gt;超快速，犯錯沒關係&lt;/li&gt;
&lt;li&gt;Non-autoregressive model
&lt;ul&gt;
&lt;li&gt;平行生成快速&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;compressed model
&lt;ul&gt;
&lt;li&gt;壓縮過的小模型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;搜尋引擎&lt;/li&gt;
&lt;li&gt;同時可以有多個預言家&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;lec17&#34;&gt;lec17&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;圖片由像素構成，影片由圖片構成&lt;/li&gt;
&lt;li&gt;如今人工智慧的輸入不會是圖片的每一個像素，而是採用encoder，把影像切成一個個patch(可能是向量或是數值)，生成後再透過decoder輸出
&lt;ul&gt;
&lt;li&gt;encoder, decoder 不只是調低解析度，其中的動作很複雜，都涵蓋了transformer&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;影片算是圖片增加了一個時間的維度，可以使用encoder進行更多的壓縮(如相鄰的frame一起處理)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;文字生圖&#34;&gt;文字生圖&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;訓練資料: 圖片與對應描述&lt;/li&gt;
&lt;li&gt;使用non-autoregression，平行生成
&lt;ul&gt;
&lt;li&gt;實際使用是同時生成，而不是多個平行&lt;/li&gt;
&lt;li&gt;因為在同個transformer中彼此有attention&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;評量影像生成好壞: CLIP
&lt;ul&gt;
&lt;li&gt;模型訓練過程中，給予圖片與描述，輸出為匹配分數&lt;/li&gt;
&lt;li&gt;但實際文字能夠描述的很有限&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;個人化圖片生成
&lt;ul&gt;
&lt;li&gt;使用一個平常不用的符號，給予目標多次訓練&lt;/li&gt;
&lt;li&gt;則之後就能用該符號，指定生成的樣式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;文字生影片
&lt;ul&gt;
&lt;li&gt;spatio-temporal attention (3D)
&lt;ul&gt;
&lt;li&gt;同時考慮每個像素在畫面中的關係以及不同時間點該像素的關係&lt;/li&gt;
&lt;li&gt;運算量過大需要簡化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;簡化
&lt;ul&gt;
&lt;li&gt;spatial attention(2D)
&lt;ul&gt;
&lt;li&gt;僅考慮每個像素在畫面中的關係&lt;/li&gt;
&lt;li&gt;可能會出現前後畫面不協調&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;temporal attention (1D)
&lt;ul&gt;
&lt;li&gt;僅考慮像素點在不同時間的的關係&lt;/li&gt;
&lt;li&gt;會導致在畫面中不協調&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;結合兩者，可將原本的n^3 轉換成n^2 + n&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可以再結合之前提及的多次NAR
&lt;ul&gt;
&lt;li&gt;首先產生低解析度低FPS的影片&lt;/li&gt;
&lt;li&gt;之後幾次可以提高FPS或是提高解析度&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;lec18&#34;&gt;lec18&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;文字生成圖片，因為文字無法完整描述影像，會有一段文字對應到多個圖片的狀況，transformer會無所適從&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;vae&#34;&gt;VAE&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;加入額外資訊給模型
&lt;ul&gt;
&lt;li&gt;此處的額外資訊稱為noise&lt;/li&gt;
&lt;li&gt;資訊抽取模型 encoder&lt;/li&gt;
&lt;li&gt;與圖片生成模型 decoder一起訓練
&lt;ul&gt;
&lt;li&gt;給予文字與圖片，encoder提取noise&lt;/li&gt;
&lt;li&gt;noise與文字輸入給decoder使起產生圖片&lt;/li&gt;
&lt;li&gt;評斷是否與原先圖片相似&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;整個組合為auto encoder&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;於使用模型階段，這些noise的部分則是隨機產生&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;flow-based-method&#34;&gt;flow-based method&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;與VAE相似&lt;/li&gt;
&lt;li&gt;只使用一個模型
&lt;ul&gt;
&lt;li&gt;VAE的encoder decoder工作內容剛好相反&lt;/li&gt;
&lt;li&gt;訓練一個decoder模型$f$，並且是invertible&lt;/li&gt;
&lt;li&gt;VAE encoder的部分在flow中就會是$f^{-1}$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;noise&#34;&gt;noise&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;noise 擁有圖形的一些特徵資訊&lt;/li&gt;
&lt;li&gt;這些noise可以被組合或改變
&lt;ul&gt;
&lt;li&gt;如對一張人臉加入笑臉noise，就能調整輸出內容為笑臉&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;diffusion-method&#34;&gt;diffusion method&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;此處的decoder為denoise，也是transformer
&lt;ul&gt;
&lt;li&gt;重複多次去除雜訊&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;訓練過程
&lt;ul&gt;
&lt;li&gt;給予圖片，圖片加上雜訊&lt;/li&gt;
&lt;li&gt;訓練denoise model可以將有雜訊的圖片還原成圖片&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;generative-adversarial-networkgan&#34;&gt;generative adversarial network(GAN)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;有個與CLIP相近的模型，用於圖形與文字的吻合度，稱作Discriminator&lt;/li&gt;
&lt;li&gt;思路相反，圖片生成模型generator透過不斷修正參數生成圖片，直到通過discriminator的評斷
&lt;ul&gt;
&lt;li&gt;正因為圖片與文字並不存在一對一關係&lt;/li&gt;
&lt;li&gt;只要令其生成的內容讓discriminator覺得好就行了，不存在標準答案&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;discriminator generator會交替訓練&lt;/li&gt;
&lt;li&gt;此處的Discriminator就是reward model&lt;/li&gt;
&lt;li&gt;可以當作plugin，與其他模型(VAE, Diffusion)進行組合使用&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Distributed Database System Lecture Note</title>
        <link>http://shawn1251.github.io/zh-tw/post/distributed-database-lecture-note/</link>
        <pubDate>Wed, 31 Jul 2024 00:00:00 +0800</pubDate>
        
        <guid>http://shawn1251.github.io/zh-tw/post/distributed-database-lecture-note/</guid>
        <description>&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;./file/Distributed%20Database%20System.pdf&#34; &gt;Mind Map&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Instructor’s name: Ali Safari &lt;br&gt;
Textbook: Principles of Distributed Database Systems, 4th edition, M. Tamer Özsu and Patrick Valduriez,
Springer, 2020, ISBN 978-3-030-26252-5&lt;/p&gt;
&lt;h2 id=&#34;distributed-and-parallel-database-design&#34;&gt;Distributed and Parallel Database Design&lt;/h2&gt;
&lt;h3 id=&#34;fragmentation&#34;&gt;fragmentation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;correctness&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;completness&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;each data in relation can also be found after fragmentation&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;reconstruction&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;by JOIN, the fragment can recovery to the original relation&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;disjointness&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;data in one fragment should not also be in other fragment&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;type&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;horizontal fragmentation (HF&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;primary horizontal (PHF&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;key points&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;simple prdicate&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;predicate: key + operator + value&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;eg. salary &amp;gt; 1000&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;minterm predicate&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;all possible combination of predicate&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;eg. loc = &amp;ldquo;France&amp;rdquo; ^ salary &amp;gt; 1000&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;minterm selectivities, sel(mi)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the percentage of records that minterm selected&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;access frequency, acc(qi)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;how many times the same query asked by different user&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;cardinality, card(R)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;number of rows&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;COM_MIN algorithm&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;input: a relation R, a set of simple predicates Pr&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;output: a &amp;ldquo;complete&amp;rdquo;, &amp;ldquo;minimal&amp;rdquo; set of simple predicates Pr&#39;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PHORIZONTAL Algorithm&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;input: a relation R, a set of predicates Pr&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;output: a set of minterm predicates M according to which relation R is to be fragmented&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;derived horizontal (DHF&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Based on the fragments created by PHF, apply similar fragmentation to other related relations.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;eg. after PHF, we divide &amp;ldquo;PAY&amp;rdquo; to 2 fragments. There is also a relation &amp;ldquo;EMP&amp;rdquo; related with &amp;ldquo;PAY&amp;rdquo;. We can also divide &amp;ldquo;EMP&amp;rdquo; by the same rule&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;vertical fragmentation (VF&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;affinity matrix&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;calculate by access frequency matrix and usage matrix&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;bond energy algorithm (BEA&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;input: the AA matrix (attribute affinity)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;output: the CA matrix(clustered affinity matrix)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;by changing the order what&amp;rsquo;s the most contribution I can get?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;find the best order for columns&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;hybrid fragmentation&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;apply both horizontal and vertical&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;reconstruction&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;vertical: join&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;horizontal: union&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;data-distribution&#34;&gt;data distribution&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;allocation alternatives&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;non-replicated&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;each fragment resides at only one site&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;replicated&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;fully replicated&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;each fragment at each site&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;partially replicated&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;each fragment at some of the sites&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;if read-only queries &amp;raquo; update queries, replication is good&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;fragment allocation&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;problem: fragments, network, application&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;find the optimal distribution&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;minimal cost&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;performance&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;constraint&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;response time&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;storage&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;processing&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;decision variable&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Xij. 1 if fragment i store in at Site j. 0 otherwise&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;both FAP and DAP are NP-complete&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;heuristic based on. about finding the best combination&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;combined-approach&#34;&gt;combined approach&lt;/h3&gt;
&lt;h2 id=&#34;transaction&#34;&gt;transaction&lt;/h2&gt;
&lt;h3 id=&#34;all-operations-as-one-unit-whole-or-nothing&#34;&gt;all operations as one unit. whole or nothing&lt;/h3&gt;
&lt;h3 id=&#34;acid&#34;&gt;ACID&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Atomicity&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;one unit&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Consistency&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Isolation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Durability&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;concurrent-execution&#34;&gt;concurrent execution&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;increase processor and disk utilization (I/O no need CPU)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;reduced average response time&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;important: multi tasks run in the but the result should be the same as serial running&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;validation&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;except read - read, all the others are conflict&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;try to move commands to see if they can be restored to the serial running format&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;if the commands are conflict, it should not be moved&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;serializability&#34;&gt;serializability&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;view serializability&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;not strict&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the initial, update, final result should be the same as serial schedule&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;check a schedule is serializable is NP-Complete problem&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;conflict serializability&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;more strict&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;conflict serializable is the sub set of serializable&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;there is no any conflict between transactions(R/W, W/W)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;test method&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;swap non-conflicting instruction&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If a schedule S can be transformed into a schedule S’ by a series of swaps of non-conflicting instructions, we say that S and S’ are conflict equivalent&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a schedule S is conflict serializable if it is conflict equivalent to a serial schedule&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;precedence graph&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;transaction =&amp;gt; node&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;conficts =&amp;gt; edge&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;if graph has cycle, means not serializable&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;can do topological sorting&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;failure&#34;&gt;failure&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;rollbacks&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;cascading rollback&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 transaction failure, all the other transactions rollback&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;recoverable schedule&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ensure data consistency&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;reading transaction can read data which not commit yet, but cannot commit before the writing transaction&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;cascadeless schedules&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;enhace recoverable schedule&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;is the subset of recoverable&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;transaction can only read data which is commited&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the schedule which try to avoid cascading rollbacks&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;concurrency-control&#34;&gt;concurrency control&lt;/h2&gt;
&lt;h3 id=&#34;concept&#34;&gt;concept&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;the mechanism provided by the db system&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;serial schedule is recoverable and cascadeless&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;have to trade off between serial schedule and concurrent schedule&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ensure schedule is conflict or view serializable&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ensure the schedule is  rcoverable and preferably cascadeless&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;to achieve these purpose, it needs a &amp;ldquo;protocol&amp;rdquo; to assure serializability&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;protocols&#34;&gt;protocols&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;lock-based protocols&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;exclusive (X) mode&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;cannot add any other lock&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;only one transaction can R/W data&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;shared (S) mode&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;can add more shared lock&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;multiple read transaction can read the data at the same time&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;two-phase locking protocol&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;grow-lockpoint-shrink&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;grow&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;the transaction acquire all the lock before access without release&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;can convert lock-S to lock-X (upgrade)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;shrink&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;start to releasing locks, cannot acquire any new lock&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;can convert lock-X to lock-S (downgrade)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;type&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;strict two-phase locking&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;keep all the X-lock till commit/abort&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;rigorous two-phase locking&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;keep all the locks till commit/abort&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ensure conflict-serializable&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;cannot avoid deadlock&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;startegy&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;read:
if lock:
read()
else:
if lock-X:
wait()
grant lock-S
read()&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;write:
if lock-X:
write()
else:
if other locks:
wait()
if lock-S:
upgrade to lock-X
else:
grant lock-X
write()&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;lock table&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;maintain by lock manager&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;lock table, record the type of lock granted or requested&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;like hash table&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;validate before grant new lock&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if there are multiple locks, the last one can only be lock-X&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Graph based protocol&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;alternative to two phase locking&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tree protocol&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Only exclusive locks are allowed&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;once unlock, cannot relock&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;conflict serializable&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;not gurantee recoverability&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;no deadlock&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;deadlock-prevention-strategies&#34;&gt;deadlock prevention strategies&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;wait-die&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;older may wait for younger release&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;younger never wait, rolled back instead&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;wound-wait&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;older can force rollback younger&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;younger may wait for older&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;fewer rollback than wait-die&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;timeout-based schemes&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;deadlock-detection&#34;&gt;deadlock detection&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;wait-for graph&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Ti -&amp;gt; Tj: Ti is waiting for a lock held by Tj&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;deadlock if there is a cycle&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;deadlock-recovery&#34;&gt;deadlock recovery&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;total rollback&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;partial rollback&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;difficult&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;multiple-granularity&#34;&gt;multiple granularity&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;can be represented as a tree&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;locks a node, also locks all the children node&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fine granularity: high concurrency, lower in tree&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Coarse granularity: low concurrency, higher in tree&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;intention lock modes&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;3 more lock mode than S, X&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;intention-shared (IS)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;same as S, but locking at a lower level&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;intention-exclusive (IX)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;shared and intention-exclusive (SIX)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;allow a higher level node to be locked without having to check all descendent nodes&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the compatibility matrix for all lock modes&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;timestamp-based-protocols&#34;&gt;Timestamp-based protocols&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;timestamp order = serializability order&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Timestamp-ordering protocol&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;WTS(Q) (W-timestamp): the largest timestamp of any transaction that executed &amp;ldquo;write(Q)&amp;rdquo;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;RTS(Q) (R-timestamp): the largest timestamp of any transaction that executed &amp;ldquo;read(Q)&amp;rdquo;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;algorithm&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Ti = Read(Q)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;if TS(Ti) &amp;lt; WTS(Q), Reject
(Ti needs the value that was already overwritten)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;if TS(Ti) &amp;gt;= WTS(Q), execute, RTS(Q) update to max(RTS(Q), TS(Ti))
(Read after latest update is accepted)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ti = Write(Q)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;if TS(Ti) &amp;lt; RTS(Q), Reject
(Ti produce a value that was  needed previously)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;if TS(Ti) &amp;lt; WTS(Q), Reject
(Ti try to write an obsolete value)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;else, WTS(Q) update to TS(Ti)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;transaction-processing-2&#34;&gt;transaction processing-2&lt;/h2&gt;
&lt;h3 id=&#34;distributed-tm-architecture&#34;&gt;Distributed TM Architecture&lt;/h3&gt;
&lt;h3 id=&#34;serializability-1&#34;&gt;serializability&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;the condition that global transaction is serializable&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;each local history should be serializable&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;two conflicting operations should be in the same relative order in all of the local histories where they appear together&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;concurrency-control-algorithms&#34;&gt;concurrency control algorithms&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Pessimistic&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Two-Phase Locking-based (2PL)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;centralized 2PL&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;only one 2PL scheduler in the distributed system&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;lock requests are issued to the central scheduler&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;pros: Simple&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;cons: reliability, bottle neck&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;distributed 2PL&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;deadlock&#34;&gt;Deadlock&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;locking-based algorithm may cause deadlocks&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TO based algorithm that involve waiting may cause deadlocks&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;wait-for graph&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Ti waits for Tj&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ti &amp;ndash;&amp;gt; Tj&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;query-processing&#34;&gt;Query Processing&lt;/h2&gt;
&lt;h3 id=&#34;for-one-query-there-may-be-several-strategies&#34;&gt;for one query, there may be several strategies&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;optimization: calculate the cost, then choose the lowest one&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;access cost&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;transfer cost&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;example&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;problem&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cost of Alternatives&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;complexity-of-relational-operations&#34;&gt;Complexity of relational operations&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Select
Project&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;O(n)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Project (eliminate duplicate)
Group&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;O(n * log n)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;sorting + check the array sequentially&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Join
Semi-Join
Division
Set&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;O(n * log n)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cartesian Product&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;O(n^2)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;query-processing-methodology&#34;&gt;Query Processing Methodology&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;Query Decomposition&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;input: Calculus query on global relations&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Normalization&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Analysis&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Simplification&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Restructing&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;output: Algebraic query&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Data Localization&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;input: Algebraic query on distributed relations&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Localization program&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reduction based on the fragmentation strategy&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;PHF&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Select&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Because we have already divided the relations base on some rule. Only have to access the relations that have intersection with the query&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Join&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Distribute join over union&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(R1 U R2)⋈S  =&amp;gt; (R1⋈S) U (R2⋈S)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;by distribute 1 join to multiple join, we can eliminate some of them that have no intersection with the query&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;VF&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;find useless intermiediate relations&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DHF&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;mix the PHF-Select and PHF-Join&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;example&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;query&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;eliminate by Selection&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;join over union&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;eliminate the empty intermediate relations&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hybrid Fragmentation&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;remove empty relations by selection on HF&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;remove useless relations by projection on VF&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;distribute joins over unions to isolate and remove useless joins&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;output: Fragment query&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Distributed Query Optimization&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;input: Fragment query&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Find the best global schedule&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;query optimization process&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Search Space&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The set of equivalent alebra expressions&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Join Trees&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Linear join tree&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bushy join tree&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cost Model&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I/O cost + CPU cost + communication cost&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Search Algorithm&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;exhaustive search / heuristic algorithm&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;how to &amp;ldquo;move&amp;rdquo; in the search space&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Deterministic&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;start from base relations and build  plans by adding one relation at each step&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DP: BFS&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Greedy: DFS&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Randomized&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;trade optimization time for execution time&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;iterative improvement&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Head First Design Pattern Note</title>
        <link>http://shawn1251.github.io/zh-tw/post/head-first-design-pattern-note/</link>
        <pubDate>Wed, 13 Dec 2023 23:36:18 -0800</pubDate>
        
        <guid>http://shawn1251.github.io/zh-tw/post/head-first-design-pattern-note/</guid>
        <description>&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.amazon.com/Head-First-Design-Patterns-Brain-Friendly/dp/0596007124&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Head First Design Patterns: A Brain-Friendly Guide&lt;/a&gt;&lt;br&gt;
閱讀筆記。這本書很淺顯易懂，把背後選擇策略的邏輯用容易理解的情境解釋。推薦給想初步了解Design Pattern的人。以下是每個章節的簡單筆記&lt;/p&gt;
&lt;h2 id=&#34;chapter-1-策略模式-strategy-pattern&#34;&gt;chapter 1: 策略模式 Strategy Pattern&lt;/h2&gt;
&lt;p&gt;策略模式定義了算法族，分別封裝起來，讓他們之間可以互相替換，此模式讓算法的變化獨立於使用算法的客戶&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;開頭先用了設計鴨子做情境。由於想讓鴨子加入&amp;quot;飛&amp;quot;的功能，Joe將這個加在了super class中，卻也造成了不該會飛的鴨子如橡皮鴨也產生了飛的功能。&lt;/li&gt;
&lt;li&gt;即使用了繼承，在子類覆蓋掉，也會因為子類型眾多不全面。書中舉例了在都不會飛的鴨子中，橡皮鴨會叫，而誘餌鴨不會叫&lt;/li&gt;
&lt;li&gt;若採用interface，會造成code無法重複使用&lt;/li&gt;
&lt;li&gt;軟體開發不變的真理就是&amp;quot;變&amp;quot;。不管當初設計多完美，一段時間後都會需要改變。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;設計原則: 找出應用中可能需要變化的部分並獨立，不要與不需要變化的代碼混在一起。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;設計原則: 針對interface設計，而不是針對實現設計&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;這部分的意思是說，我們要針對abstract class or interface進行設計。例如: abstract class 有Animal，繼承他的有Dog。則如果我們要讓他發出聲音，可以直接在Dog寫一個method bark()。但如果針對interface設計，則我們會在Animal加入makeSound，於Dog繼承後在makeSound中發出bark。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;承設計Duck，我們可以設計出FlyBehavior這個interface，對此就可以分別implement出FlyWithWings, FlyNoWay兩個類。而我們的abstract class Duck就可以用has-a的概念加入一個FlyBehavior的變量，而我們針對行為建立一個method preformanceFly，call這個FlyBehaivor的變量委託這個class進行fly。往後需要建立不同的duck的時候，就可以在繼承Duck時，給予相對應的FlyBehavior。甚至可以加入setter，中途變換FlyBehavior，增加彈性。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;class之間的關係可以有三種: is-a, has-a, implements
&lt;ul&gt;
&lt;li&gt;上述的例子中，每個鴨子都&amp;quot;有&amp;quot;一個FlyBehavior，也就是將飛行行為委託給這個class處理&lt;/li&gt;
&lt;li&gt;將兩個類結合一起使用就是&amp;quot;composition&amp;quot;，相較於&amp;quot;inherit&amp;quot;更具彈性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;設計原則:多用組合，少用繼承&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;使用設計模式的共通詞彙可以提升討論效率、維持在高層次而不瑣碎。如&amp;quot;我們使用策略模式實現Duck的各種行為&amp;quot;，也就表示Duck的各種行為被封裝進一組class中，可以輕易被擴充改變&lt;/li&gt;
&lt;li&gt;知道抽象、封裝、繼承、多態並不會讓人馬上變成好的OOP設計者，設計者更關心是建立彈性的設計，高維護性，可以應變&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;chapter2-觀察者模式-observer-pattern&#34;&gt;Chapter2: 觀察者模式 Observer pattern&lt;/h2&gt;
&lt;p&gt;定義了object之間的一對多依賴關係，當一個object改變狀態，他的所有依賴者都會收到通知並自動更新&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;設計原則: 為了交互物件之間的鬆耦合設計而努力&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;有彈性能應變的OO系統是因為物件之前的低互相依賴關係&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;書中首先提出的情境是一個氣象觀測站，在收到資料更新後推送給相關的顯示器。直覺的作法是在觀測站資料更新的時侯call顯示器的update。但這麼做在幽需要更多顯示器時就要更改觀測站本身程式。&lt;/li&gt;
&lt;li&gt;觀察者模式的概念就是將上述需求切分為subject與oberser。可以想像成報社與訂閱者，需要報紙的訂閱者先向報社訂閱，報社在每次有新報紙時會送給訂閱者。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Subject&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;registerObserver&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Observer&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;removeObserver&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Observer&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;notifyObservers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Observer&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;update&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(...);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;這兩個物件會是鬆耦合，可以互動，但毋須知道對方細節。&lt;/li&gt;
&lt;li&gt;java 存在內建的觀察者模式，差別在於Observable不是interface而是class來繼承使用&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;java.util.Observable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;java.util.Observer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;MySubject&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;extends&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Observable&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//Obserable提供之方法&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;addObserver&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;deleteObserver&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;notifyObserver&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;setChanged&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;MyObserver&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;implements&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Observer&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// Observer需要實做的方法&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;update&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;observer pattern被廣泛應用在GUI框架當中，如按鈕行為&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;chapter3-decorator-pattern-裝飾者模式&#34;&gt;chapter3: decorator pattern 裝飾者模式&lt;/h2&gt;
&lt;p&gt;動態將責任附加到物件上。若要擴展功能，decorator提供了比繼承更有彈性的替代方案。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;本書以咖啡廳作為例子。一家咖啡廳販賣的品項眾多，若採用傳統的繼承，class的數量會太龐大，而且base class加入的功能並不適用所有子類別&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;設計原則: class應該對擴展開放，對修改關閉 (開放-關閉原則)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;選擇擴展的部分要小心，如果每個地方都採用，會讓設計太過複雜難以理解&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;裝飾者模式採用的方法是以飲料為主體，並且在運作時以配料做decorate。如需要奶泡時就以Whip去裝飾他，而最後call cost()時利用依賴委託將配料的價格加上&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;書中以飲料舉例，建立了一個&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CondimentDecorator&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，配料以此繼承後實作。注意&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CondimentDecorator也必須繼承自最上層的abstract&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Beverage&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，不然就不能達到&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;decorator可以層層wrap的特點&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;在&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;getDescription&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;與&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cost&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;的時候，會&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;delegate給上一個被wrap的物件運作&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，並在自己的&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;class中&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;加料&amp;#34;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;後回傳&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Mocha&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CondimentDecorator&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;Beverage&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;beverage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Mocha&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Beverage&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;beverage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;beverage&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;beverage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;ne&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;getDescription&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;beverage&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;getDescription&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;, Mocha&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cost&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;beverage&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cost&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;我們的設計應該要允許行為可以被擴展，而不用修改既有代碼&lt;/li&gt;
&lt;li&gt;實際應用上，一個很好的例子是 &lt;code&gt;java.io&lt;/code&gt;。在最基本的stream中，FIleInputStream提供了基本的字節讀取功能，而裝飾器BufferedInputStream則加入緩衝功能增加效能，裝飾器LineNumberInputStream則加上了計算行數的功能。上述的裝飾器都是繼承了一個抽象的decorator FilterInputStream。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;chapter4-factory-method-pattern-工廠模式&#34;&gt;Chapter4: Factory Method Pattern 工廠模式&lt;/h2&gt;
&lt;p&gt;工廠模式定義了一個創建物件的接口，但由子類決定要創建哪個物件的實體。工廠把類的實體化推遲到子類。以此來對物件的建構進行封裝。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;簡單工廠與工廠模式不同，雖然能夠對物件的創建封裝，但不具備工廠方法可以變更正在創建產品的彈性&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PizzaStore&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;這部分為抽象方法，由子類實體進行定義&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Pizza&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;createPizza&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Pizza&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;orderPizza&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;o&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;客戶僅需統一調用&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;orderPizza&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，不用管是那個實際子類&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NYStylePizzaStore&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PizzaStore&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;createPizza由顧客到了哪家店才決定&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，但仍採用原本的&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;orderPizza&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Pizza&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;createPizza&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;equals&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;cheese&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;pizza&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NYStyleCheesePizza&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pizza&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;設計原則: 要依賴抽象，不要依賴實體類 (依賴反轉)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;變量不可持有具體類的引用，可以透過工廠來避免這個做法&lt;/li&gt;
&lt;li&gt;不要讓類衍生自具體類，而是自一個抽象(interface or abstract class)&lt;/li&gt;
&lt;li&gt;不要覆蓋基類中已實現的方法，要讓它由所有子類共享&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>I2C筆記</title>
        <link>http://shawn1251.github.io/zh-tw/post/i2c-note/</link>
        <pubDate>Thu, 23 Nov 2023 00:00:00 +0800</pubDate>
        
        <guid>http://shawn1251.github.io/zh-tw/post/i2c-note/</guid>
        <description>&lt;ul&gt;
&lt;li&gt;I2C的傳輸一樣是兩條線，但不同於TX RX，I2C只有一條SDA可以運作，另一條是時鐘線SCL
&lt;ul&gt;
&lt;li&gt;SDA(serial data)，傳輸資料&lt;/li&gt;
&lt;li&gt;SCL(serial clock)，提供時鐘脈衝&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;半雙工
&lt;ul&gt;
&lt;li&gt;TX RX可以同一時間傳輸與接收，稱為全雙工通信。而I2C同時間只能有一方傳輸，所以為半雙工&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;主從模式
&lt;ul&gt;
&lt;li&gt;同一時間只能有一方發信，為了避免衝突只能先由主機發起通訊，從機收到後再回覆&lt;/li&gt;
&lt;li&gt;可以有多個從機&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;總線協議
&lt;ul&gt;
&lt;li&gt;如I2C這種可以多個設備間的通信&lt;/li&gt;
&lt;li&gt;主機在發送的訊息開頭，會加上目標設備地址，其餘從機收到目標不是自己的訊息會選擇丟棄&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;同步通信
&lt;ul&gt;
&lt;li&gt;異步通信雙方有各自的時鐘，以協議的Baud Rate進行通信&lt;/li&gt;
&lt;li&gt;但一些小型的傳感器沒有準確的晶振可以提供時鐘&lt;/li&gt;
&lt;li&gt;所以由主機的SCL給予所有從機時鐘脈衝&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>使用CH340燒錄程式到STM32</title>
        <link>http://shawn1251.github.io/zh-tw/post/stm32-ch340/</link>
        <pubDate>Mon, 20 Nov 2023 00:00:00 +0800</pubDate>
        
        <guid>http://shawn1251.github.io/zh-tw/post/stm32-ch340/</guid>
        <description>&lt;p&gt;最近在用STM32學習嵌入式開發。但由於沒有STLINK，我這邊只能使用CH340燒錄。這邊記錄了一下過程。&lt;/p&gt;
&lt;h2 id=&#34;需求軟體&#34;&gt;需求軟體&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Keil5&lt;/li&gt;
&lt;li&gt;FlyMcu&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;步驟&#34;&gt;步驟&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;CH340有幾個針腳
&lt;ul&gt;
&lt;li&gt;VCC: 這有一個跳線帽，可以設定5V/3.3V&lt;/li&gt;
&lt;li&gt;RX: 接收，接在GPIO的PA09&lt;/li&gt;
&lt;li&gt;TX: 發送，接在GPIO的PA10&lt;/li&gt;
&lt;li&gt;GND: 接地&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;燒錄需要的是hex檔，所以在我的IDE Keil5上要額外設定
&lt;ul&gt;
&lt;li&gt;點擊魔術棒的icon(options for target)&lt;/li&gt;
&lt;li&gt;Output &amp;gt; create hex file&lt;/li&gt;
&lt;li&gt;之後在build後，hex file會出現在Objects資料夾中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;這邊使用的燒錄軟體是FlyMcu，以下是燒錄步驟
&lt;ul&gt;
&lt;li&gt;插上CH340後，確認上方的port com為我們的CH340&lt;/li&gt;
&lt;li&gt;Code file for online ISP &amp;gt; 選擇build好的hex file&lt;/li&gt;
&lt;li&gt;勾選 Verify, Run After ISP complete&lt;/li&gt;
&lt;li&gt;取消勾選 Program OptionBytes when ISP&lt;/li&gt;
&lt;li&gt;接著就能點擊 Start ISP&lt;/li&gt;
&lt;li&gt;如果右側訊息出現下方訊息表示成功
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;....
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Write 1KB Ok,100%,@1562ms
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Go from 08000000 Ok
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果要再燒錄新的program，要按一下stm32上的reset按鈕&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Apache Airflow 筆記</title>
        <link>http://shawn1251.github.io/zh-tw/post/apache-airflow/</link>
        <pubDate>Tue, 14 Nov 2023 00:00:00 +0800</pubDate>
        
        <guid>http://shawn1251.github.io/zh-tw/post/apache-airflow/</guid>
        <description>&lt;p&gt;任務調動的工具。有過基礎linux經驗的應該都知道crontab，但他有無法建立複雜任務依賴，簡單調閱日誌等缺點，這時就需要一個完善的ETL工具。本篇筆記簡單記錄我的學習過程，並將成果上傳到&lt;a class=&#34;link&#34; href=&#34;https://github.com/shawn1251/StockFlow&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;github repo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;另外目前airflow已經發展到v2，而網路上還能找到不少關於v1的教學，所以在學習的時候要注意版本。官方的文章&lt;a class=&#34;link&#34; href=&#34;https://airflow.apache.org/blog/airflow-two-point-oh-is-here/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;在此&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;特點&#34;&gt;特點&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;開源&lt;/li&gt;
&lt;li&gt;友善的UI&lt;/li&gt;
&lt;li&gt;有豐富的plugin&lt;/li&gt;
&lt;li&gt;純python&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;getting-started&#34;&gt;Getting Started&lt;/h2&gt;
&lt;p&gt;推薦快速啟動可以使用官方docker compose
&lt;a class=&#34;link&#34; href=&#34;https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;curl -LfO &lt;span class=&#34;s1&#34;&gt;&amp;#39;https://airflow.apache.org/docs/apache-airflow/2.7.3/docker-compose.yaml&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;創建必要volume與設定airflow執行者&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mkdir -p ./dags ./logs ./plugins ./config
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; -e &lt;span class=&#34;s2&#34;&gt;&amp;#34;AIRFLOW_UID=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;id -u&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &amp;gt; .env
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;init與執行&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker compose up airflow-init
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker compose up
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;dag&#34;&gt;DAG&lt;/h2&gt;
&lt;p&gt;DAG(Directed Acyclic Graph)有向無環圖。在Airflow中，DAG是一個工作流程的定義，描述了一系列的任務（Tasks）和它們之間的依賴關係。每個任務代表一個工作單元，可以是任何可以在Airflow中執行的操作，例如執行Python腳本、執行SQL查詢、調用外部API等。&lt;/p&gt;
&lt;h3 id=&#34;example&#34;&gt;example&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;datetime&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;datetime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;timedelta&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;airflow&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DAG&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;airflow.operators.dummy_operator&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DummyOperator&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;airflow.operators.python_operator&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PythonOperator&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 定義預設參數&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;default_args&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s1&#34;&gt;&amp;#39;owner&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;airflow&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s1&#34;&gt;&amp;#39;depends_on_past&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s1&#34;&gt;&amp;#39;start_date&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;datetime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2023&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s1&#34;&gt;&amp;#39;email_on_failure&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s1&#34;&gt;&amp;#39;email_on_retry&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s1&#34;&gt;&amp;#39;retries&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s1&#34;&gt;&amp;#39;retry_delay&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;timedelta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;minutes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;print_hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Hello from the PythonOperator task&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 定義DAG&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DAG&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s1&#34;&gt;&amp;#39;simple_dag_example&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;default_args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;default_args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;A simple example DAG&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;schedule_interval&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;timedelta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;days&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# 每天執行一次&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# 定義兩個任務，v2開始也能使用decorator&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;start_task&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DummyOperator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;task_id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;start_task&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;dag&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;python_task&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PythonOperator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;task_id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;python_task&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;python_callable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;print_hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;dag&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# 定義任務之間的依賴關係，這樣的範例為先執行start_task後再執行python_task&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;start_task&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;python_task&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;scheduler&#34;&gt;Scheduler&lt;/h2&gt;
&lt;p&gt;Scheduler會定時去檢查DAGs的資料夾&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;檢查是否有任何DAGs需要DAG Run&lt;/li&gt;
&lt;li&gt;對DAG Run 下的task建立schedule task instance&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;所以要建立一個任務最直覺的方式，就是將編寫好的DAG py檔放入DAGs資料夾。可以從airflow的&lt;a class=&#34;link&#34; href=&#34;https://airflow.apache.org/docs/apache-airflow/2.0.0/tutorial.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;example&lt;/a&gt;中複製並修改開始，或直接參考上個section的example&lt;/p&gt;
&lt;h2 id=&#34;ui操作&#34;&gt;UI操作&lt;/h2&gt;
&lt;p&gt;如果scheduler已經完成update，則我們就能在ui介面上看到我們新增的DAG。關於UI的操作說明礙於平台不適合放入過多圖片，因此改提供&lt;a class=&#34;link&#34; href=&#34;https://airflow.apache.org/docs/apache-airflow/stable/ui.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;官方的UI說明連結&lt;/a&gt;。
大家可以朝著最基本的操作熟悉為目標:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;檢視DAG運作情況&lt;/li&gt;
&lt;li&gt;手動觸發DAG運作&lt;/li&gt;
&lt;li&gt;調閱DAG執行log&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Addiction Recovery</title>
        <link>http://shawn1251.github.io/zh-tw/post/addiction-recovery/</link>
        <pubDate>Mon, 06 Nov 2023 00:00:00 +0800</pubDate>
        
        <guid>http://shawn1251.github.io/zh-tw/post/addiction-recovery/</guid>
        <description>&lt;p&gt;本篇筆記是來自&lt;a class=&#34;link&#34; href=&#34;https://www.youtube.com/watch?v=LbbyLeR1ZRk&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;心河擺渡-成瘾始于痛苦，戒瘾终于平衡！深度解读多巴胺，用身体内稳态戒瘾&lt;/a&gt; 。影片中有作者自己的心得分享以及他對Anna Lembke的著作&lt;a class=&#34;link&#34; href=&#34;https://www.amazon.com/Drug-Dealer-MD-Doctors-Patients/dp/1421421402&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Drug Dealer, MD: How Doctors Were Duped, Patients Got Hooked, and Why It’s So Hard to Stop&lt;/a&gt; 的一些整理。內容十分受用，特地作筆記提醒自己。&lt;/p&gt;
&lt;h2 id=&#34;成癮的背景&#34;&gt;成癮的背景&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;成癮的原因在於提升的多巴胺
&lt;ul&gt;
&lt;li&gt;巧克力提升55%&lt;/li&gt;
&lt;li&gt;尼古丁提高150%&lt;/li&gt;
&lt;li&gt;苯丙胺提高1000%&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;多巴胺的主要作用不是在獲得獎勵後感到快樂，而是驅動人們追求獎勵的動機
&lt;ul&gt;
&lt;li&gt;好比看到巧克力時，多巴胺會啟動腦中獎賞迴路，還沒食用就能感受到愉悅，進而產生食用的衝動&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;大腦中產生快樂的區域與產生痛苦的區域是重疊的
&lt;ul&gt;
&lt;li&gt;快樂與痛苦有自我調節功能，當現在快樂的同時，大腦會在另一端產生足夠的痛苦來平衡&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;獎賞預測誤差
&lt;ul&gt;
&lt;li&gt;因為神經適應，實際的獎勵要超出預期才會令多巴胺有好的效果&lt;/li&gt;
&lt;li&gt;重度成癮者，感受快樂的門檻會越來越高，造成快感缺失&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;利用多巴胺機制&#34;&gt;利用多巴胺機制&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;根據臨床經驗，重製大腦獎賞迴路最短需要一個月&lt;/li&gt;
&lt;li&gt;以痛治痛
&lt;ul&gt;
&lt;li&gt;大腦會用痛苦平衡快樂，反過來用痛苦平衡快樂
&lt;ul&gt;
&lt;li&gt;根據研究，人浸泡在冷水中，血漿中的多巴胺濃度增加250%，而且持續時間超過浸泡的時間&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;運動是最好的選擇&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;物理阻斷
&lt;ul&gt;
&lt;li&gt;與成癮物徹底分開&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;激進誠實
&lt;ul&gt;
&lt;li&gt;前額葉皮質負責理性決策&lt;/li&gt;
&lt;li&gt;在多巴胺獎勵迴路發生時，說謊會抑制前額葉皮質作用，停止對獎勵迴路的約束，造成大腦認為自己沒有上癮&lt;/li&gt;
&lt;li&gt;在戒癮當中重要的一環就是重建前額葉皮質與多巴胺迴路的關係&lt;/li&gt;
&lt;li&gt;透過&amp;quot;說實話&amp;quot;強化前額葉皮質，提高自控力
&lt;ul&gt;
&lt;li&gt;在成癮時，與自我對話或是對身邊的人宣布自己有什麼癮&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>AWS 筆記-專案轉移至雲端</title>
        <link>http://shawn1251.github.io/zh-tw/post/aws-note-shift-to-cloud/</link>
        <pubDate>Thu, 02 Nov 2023 00:00:00 +0800</pubDate>
        
        <guid>http://shawn1251.github.io/zh-tw/post/aws-note-shift-to-cloud/</guid>
        <description>&lt;p&gt;最近在 Udemy 上學習 &lt;a class=&#34;link&#34; href=&#34;https://www.udemy.com/course/decodingdevops/#reviews&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;DevOps Beginners to Advanced with Projects&lt;/a&gt;。在此做一些關於 AWS 使用上的筆記。&lt;/p&gt;
&lt;h2 id=&#34;original-application-stack&#34;&gt;Original Application Stack&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/hkhcoder/vprofile-project/tree/aws-LiftAndShift&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;專案github&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Nginx&lt;/li&gt;
&lt;li&gt;Apache&lt;/li&gt;
&lt;li&gt;Tomcat&lt;/li&gt;
&lt;li&gt;RabbitMQ&lt;/li&gt;
&lt;li&gt;Memcache&lt;/li&gt;
&lt;li&gt;Mysql
&lt;figure&gt;&lt;img src=&#34;http://shawn1251.github.io/post/aws-note-shift-to-cloud/images/origin-arch.drawio.png&#34; width=&#34;30%&#34;&gt;
&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;移轉目標&#34;&gt;移轉目標&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;EC2
&lt;ul&gt;
&lt;li&gt;vm for tomcat, rabbitmq,memcache, mysql&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ELB
&lt;ul&gt;
&lt;li&gt;nginx load balancer&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Autoscaling
&lt;ul&gt;
&lt;li&gt;automation for vm scaling&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;S3/EFS
&lt;ul&gt;
&lt;li&gt;shared storage&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;route53
&lt;ul&gt;
&lt;li&gt;private dns service&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;目標架構圖&#34;&gt;目標架構圖&lt;/h3&gt;
&lt;figure&gt;&lt;img src=&#34;http://shawn1251.github.io/post/aws-note-shift-to-cloud/images/shift-aws-arch.drawio.png&#34; width=&#34;70%&#34;&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;flow-of-execution&#34;&gt;flow of execution&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Create key pairs&lt;/li&gt;
&lt;li&gt;Create security groups
&lt;ul&gt;
&lt;li&gt;此處切為三組:
&lt;ul&gt;
&lt;li&gt;LB(取代nginx)&lt;/li&gt;
&lt;li&gt;APP(tomcat)&lt;/li&gt;
&lt;li&gt;Backend(包含rabbitmq, memcache, mysql)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Launch instance with user data
&lt;ul&gt;
&lt;li&gt;目前還是半自動化的流程&lt;/li&gt;
&lt;li&gt;手動建立intance並且於userdata中貼上環境安裝設定的shell&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Update ip to name mapping in route53
&lt;ul&gt;
&lt;li&gt;這邊設定一個內部DNS，讓instance之間的溝通可以用hostname&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Build application from source code
&lt;ul&gt;
&lt;li&gt;這邊仍是半自動化的部分，我們在local端將java的專案build完畢&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Upload to S3 bucket
&lt;ul&gt;
&lt;li&gt;使用aws cli上傳build的java war至APP instance&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Download artifact to Tomcat EC2 instance
&lt;ul&gt;
&lt;li&gt;之前在local端是使用key的方式來連接s3&lt;/li&gt;
&lt;li&gt;此處instance連接S3練習使用IAM role
&lt;ul&gt;
&lt;li&gt;於IAM建立新的S3 access role&lt;/li&gt;
&lt;li&gt;於APP instance中加入建立的role&lt;/li&gt;
&lt;li&gt;&lt;code&gt;aws s3 ls&lt;/code&gt;即可確認是否通過&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Setup ELB with https(cert from amazon certificate manager)
&lt;ul&gt;
&lt;li&gt;建立target group
&lt;ul&gt;
&lt;li&gt;須注意這邊是要通向app的8080port&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;建立LB
&lt;ul&gt;
&lt;li&gt;設定listen HTTP/HTTPS routing 至 target group&lt;/li&gt;
&lt;li&gt;購買網域後於aws的certificate manager申請ssl cert&lt;/li&gt;
&lt;li&gt;secure listener 選用from ACM，使用剛剛的ssl cert&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Map ELB endpoint to website name in DNS
&lt;ul&gt;
&lt;li&gt;於DNS提供商(此處是用godaddy)，建立CNAME，並轉向AWS LB的domain&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Verify
&lt;ul&gt;
&lt;li&gt;DNS的設定通常會需要一點時間&lt;/li&gt;
&lt;li&gt;可以直接先access LB的domain檢查80有沒有APP出現&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Build autoscaling group for tomcat instance
&lt;ul&gt;
&lt;li&gt;autoscaling三個步驟
&lt;ul&gt;
&lt;li&gt;AMI
&lt;ul&gt;
&lt;li&gt;此處我們以app作為目標，將當前的app instance create image&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;launch template
&lt;ul&gt;
&lt;li&gt;使用剛建立的AMI，security group 與原本的APP相同&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;autoscaling group
&lt;ul&gt;
&lt;li&gt;attach to existing load balancer&lt;/li&gt;
&lt;li&gt;選擇load balancer使用的target group&lt;/li&gt;
&lt;li&gt;設定scaling policy，可以使用CPU用量或是network in/out&lt;/li&gt;
&lt;li&gt;設定notification&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>AWS 筆記</title>
        <link>http://shawn1251.github.io/zh-tw/post/aws-note/</link>
        <pubDate>Tue, 31 Oct 2023 00:00:00 +0800</pubDate>
        
        <guid>http://shawn1251.github.io/zh-tw/post/aws-note/</guid>
        <description>&lt;p&gt;最近在 Udemy 上學習 &lt;a class=&#34;link&#34; href=&#34;https://www.udemy.com/course/decodingdevops/#reviews&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;DevOps Beginners to Advanced with Projects&lt;/a&gt;。在此做一些關於 AWS 使用上的筆記&lt;/p&gt;
&lt;h2 id=&#34;建立ec2&#34;&gt;建立EC2&lt;/h2&gt;
&lt;p&gt;最基本的執行單位&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Name and Tag
&lt;ul&gt;
&lt;li&gt;這邊可以選用 &lt;code&gt;add additional tag&lt;/code&gt;，多補充標籤，方便在aws console上可以快速搜尋指定的instance&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AMI
&lt;ul&gt;
&lt;li&gt;AMI 是image，有點類似docker上取用image後run成container，但在此是run 成 instance&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;instance type
&lt;ul&gt;
&lt;li&gt;由於目前是 free tier，只使用過 t2.micro。實際使用情境可以根據需求選擇不同等級的資源&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;key pair
&lt;ul&gt;
&lt;li&gt;由於aws在遠端登入時都是採用ssh key，因次在這個階段要選用此instance的key pair。&lt;/li&gt;
&lt;li&gt;方便的是一組key pair可以被重複使用在不同instance上。可因應實際使用作key pair管理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;network setting
&lt;ul&gt;
&lt;li&gt;主要在建立進出規則&lt;/li&gt;
&lt;li&gt;通常會打開的in bound是ssh，source的部分可以加入my ip&lt;/li&gt;
&lt;li&gt;如果是網頁服務用instance，一般會加入HTTP，並且source為anywhere&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;configure storage
&lt;ul&gt;
&lt;li&gt;storage分成很多類型。好比SSD，HDD，磁帶，也有根據IO做的特化型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;advanced
&lt;ul&gt;
&lt;li&gt;此處我使用到的是 &lt;code&gt;User data&lt;/code&gt; 這一個欄位。這部分可以直接寫上shell，方便在啟動的時候就預先裝載軟體或完成相關設定&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;elastic-block-store&#34;&gt;Elastic Block Store&lt;/h2&gt;
&lt;p&gt;儲存體&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;volume type
&lt;ul&gt;
&lt;li&gt;storage分成很多類型。好比SSD，HDD，磁帶，也有根據IO做的特化型&lt;/li&gt;
&lt;li&gt;還可以選擇建立地區&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;aws 裡volume可以動態attach
&lt;ul&gt;
&lt;li&gt;attach 在指定的instance&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fdisk -l&lt;/code&gt; 可以檢查該volume的名稱&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fdisk /dev/xvdf&lt;/code&gt; 這個路徑可能有所不同，根據前一個指令取得的dev更換
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;m&lt;/code&gt; 可以檢視可用指令&lt;/li&gt;
&lt;li&gt;&lt;code&gt;n&lt;/code&gt; new partition&lt;/li&gt;
&lt;li&gt;&lt;code&gt;p&lt;/code&gt; primary&lt;/li&gt;
&lt;li&gt;partition number: default 1&lt;/li&gt;
&lt;li&gt;First sector: default 2048&lt;/li&gt;
&lt;li&gt;Last sector: default&lt;/li&gt;
&lt;li&gt;&lt;code&gt;w&lt;/code&gt; write table to disk&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mkfs.ext4 /dev/xvdf1&lt;/code&gt;: 這個指令可以根據要使用的format做更換，本處使用ext4&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;lsblk&lt;/code&gt; 檢查是否出現&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mount /dev/xvdf1 {target path}&lt;/code&gt; 就能進行掛載
&lt;ul&gt;
&lt;li&gt;如果要讓其自動掛載，請修改&lt;code&gt;/etc/fstab&lt;/code&gt;。往後就能開機自動掛載也可使用&lt;code&gt;mount -a&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;snapshot
&lt;ul&gt;
&lt;li&gt;通常主要的資料都會使用另外的volume，好比database的data&lt;/li&gt;
&lt;li&gt;我們可以使用 EBS 中的 snapshot 功能，為當前的volume進行備份&lt;/li&gt;
&lt;li&gt;之後一旦有需要進行還原，就可以對指定的snapshot執行create volume from snapshot，就可以將當時的內容重新掛載到instance上&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;load-balancing&#34;&gt;Load Balancing&lt;/h2&gt;
&lt;p&gt;以兩個執行同樣http server的instances做example&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;建立target group
&lt;ul&gt;
&lt;li&gt;target group 的health check用來確認instance是否正常，如果是網頁伺服器，可以設定http路徑定時對指定頁面進行請求&lt;/li&gt;
&lt;li&gt;將目標的instances拉入target group&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;建立load balancer
&lt;ul&gt;
&lt;li&gt;先以 Application Load Balance 為 example&lt;/li&gt;
&lt;li&gt;security group 由於是web server，要設定inbound 為 HTTP ipv4/v6 anywhere&lt;/li&gt;
&lt;li&gt;listener &amp;amp; routing 設定為轉發到剛才創建的target group&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;回頭設定target group的security group
&lt;ul&gt;
&lt;li&gt;因為剛剛並沒有設定load balancer所在的security group可以access到target group。因此要將load balancer所在的security group加入target group 的security 中。 inbound HTTP custom {sg id}&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;cloud-watch&#34;&gt;Cloud Watch&lt;/h2&gt;
&lt;p&gt;可以用來建立警告，此處以cpu資源作作為example&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;all alarm -&amp;gt; create alarm&lt;/li&gt;
&lt;li&gt;select metric -&amp;gt; ec2 -&amp;gt; pre instance metric&lt;/li&gt;
&lt;li&gt;尋找目標的instance id，並選取CPUUtilization&lt;/li&gt;
&lt;li&gt;在greater than..的部分設定想要的百分比，好比60&lt;/li&gt;
&lt;li&gt;最後，設定通知的內容還有對象email或群組&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;efs&#34;&gt;EFS&lt;/h2&gt;
&lt;p&gt;這有點類似我們linux上在用的NFS，適合作為多個instance共同的儲存空間&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;建立security group
&lt;ul&gt;
&lt;li&gt;由於EFS是基於網路的連線，所以必須先設定security group&lt;/li&gt;
&lt;li&gt;將inbound 加入 NFS，source 為目標instance的security group&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;EFS -&amp;gt; create file system
&lt;ul&gt;
&lt;li&gt;這邊練習用的performance setting使用預設的enhanced, elastic即可。實際使用根據需求調整&lt;/li&gt;
&lt;li&gt;Network setting這邊所有availability zone的security group 都選擇剛剛新建立給EFS用的security group。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;建立access point
&lt;ul&gt;
&lt;li&gt;file system 選擇剛建立的file system id&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;從EC2進行mount
&lt;ul&gt;
&lt;li&gt;連線EFS要一些工具，執行&lt;code&gt;sudo yum install -y amazon-efs-utils&lt;/code&gt;安裝。這部分可以參考&lt;a class=&#34;link&#34; href=&#34;https://docs.aws.amazon.com/efs/latest/ug/installing-amazon-efs-utils.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;官方文件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;接下來設定/etc/fstab
&lt;ul&gt;
&lt;li&gt;加入這一行 &lt;code&gt;{file-system-id}:/ {efs-mount-point} efs _netdev,noresvport,tls,accesspoint={access-point-id} 0 0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;可參考&lt;a class=&#34;link&#34; href=&#34;https://docs.aws.amazon.com/efs/latest/ug/automount-with-efs-mount-helper.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;官方文件&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;執行&lt;code&gt;mount -fav&lt;/code&gt;。若出現 {mount-point} : successfully mounted，就完成了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>常用於filter的shell command </title>
        <link>http://shawn1251.github.io/zh-tw/post/shell-cmd-filter/</link>
        <pubDate>Mon, 30 Oct 2023 00:00:00 +0800</pubDate>
        
        <guid>http://shawn1251.github.io/zh-tw/post/shell-cmd-filter/</guid>
        <description>&lt;p&gt;對於有在使用linux的初階使用者，cp mv ls 等的指令應該都用的很熟練了。這邊要筆記的是我一些常用但也花了一段時間才熟練的指令&lt;/p&gt;
&lt;h2 id=&#34;cat&#34;&gt;cat&lt;/h2&gt;
&lt;p&gt;大多數使用cat是用來顯示檔案的內容，如 &lt;code&gt;cat {your file}&lt;/code&gt;。但其實他還有連結兩個檔案，與創建檔案寫入的功能&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;連接兩檔案
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cat {file1} {file2} &amp;gt; {merged file}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;創建新檔案並寫入
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cat &amp;gt; {your file}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;他會接收你接下來的輸入並寫入檔案&lt;/li&gt;
&lt;li&gt;所以有些自動化腳本會使用這個指令來自動化創建檔案
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cat &amp;gt; testFile &amp;lt;&amp;lt; EOF
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;{your content}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;EOF
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;grep&#34;&gt;grep&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;grep -R SELINUX /etc/*
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;-i 忽略大小寫&lt;/li&gt;
&lt;li&gt;-R 包含子資料夾&lt;/li&gt;
&lt;li&gt;-v 反向，輸出關鍵字以外的內容&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;cut&#34;&gt;cut&lt;/h2&gt;
&lt;p&gt;可以用來快速提取固定格式檔案中的內容。好比&lt;code&gt;/etc/passwd&lt;/code&gt; 中，可以看見內容都是以&amp;quot;:&amp;ldquo;做分隔&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;root:x:0:0:root:/root:/bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;vagrant:x:1000:1000::/home/vagrant:/bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;此時我們用cut指令&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cut -d: -f1 /etc/passwd
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;-d 是切分的參數，後面接著&amp;rdquo;:&amp;ldquo;代表要以&amp;rdquo;:&amp;ldquo;做分隔&lt;/li&gt;
&lt;li&gt;-f1 是要提取切分後的field 1的意思，此處取出的部分會是username&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;出來的output就會是&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;root
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;vagrant
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;awk&#34;&gt;awk&lt;/h2&gt;
&lt;p&gt;前一個指令&lt;code&gt;cut&lt;/code&gt;適用於有適合的separator，當變化較複雜時我們使用awk。如果是上述的例子改用awk改寫會是:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;awk -F&amp;#39;:&amp;#39; &amp;#39;{print $1}&amp;#39; /etc/passwd
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;-F 是用來定義sepeartor&lt;/li&gt;
&lt;li&gt;{print $1} 是用來定義輸出，此處是輸出切分後的第一位&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;sed&#34;&gt;sed&lt;/h2&gt;
&lt;p&gt;用來做文字取代，注意的是他是對stream做取代，所以不會覆蓋到原本文件。舉例如下:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;echo &amp;#34;this is a book.&amp;#34; &amp;gt; test
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 建立一個範例文字
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sed &amp;#39;s/book/dog/g&amp;#39; test
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; this is a dog.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 他將文字輸出的book替換成dog
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# s 為search
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# g 為global
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# test 可以替換成&amp;#39;*&amp;#39;，更改複數個檔案
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cat test
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; this is a book.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 原本的檔案沒有變化
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 如果要覆蓋，可以加上 -i
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sed -i &amp;#39;s/book/dog/g&amp;#39; test
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cat test
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; this is a dog.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;redirection&#34;&gt;redirection&lt;/h2&gt;
&lt;p&gt;我們在對linux下指令的輸出預設是在螢幕上，而我們也可以將輸出進行導向轉移到file。
以下有幾個重點:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;gt;&lt;/code&gt; 會對輸出對象覆蓋，&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; 是append&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1&lt;/code&gt;是stdout, &lt;code&gt;2&lt;/code&gt;是stderr&lt;/li&gt;
&lt;li&gt;可以使用&lt;code&gt;&amp;amp;&lt;/code&gt;對所有輸出都進行導向&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 當目標是導出stdout，不用特別加上1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ls &amp;gt;&amp;gt; tmpfile
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# lss 為不存在指令，bash會報錯，此時可以將他報錯的stderr進行導出。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;lss 2&amp;gt;&amp;gt; tmpfile
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# &amp;amp;符號代表將stdout stderr都導出
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ls &amp;amp;&amp;gt;&amp;gt; tmpfile
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;lss &amp;amp;&amp;gt;&amp;gt; tmpfile
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;pipe&#34;&gt;pipe&lt;/h2&gt;
&lt;p&gt;使用pipe &lt;code&gt;|&lt;/code&gt;將輸出作為下個指令的輸入。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 我們將ls輸出給wc計算行數
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ls | wc -l
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 將free輸出的mem欄位提取出來
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;free | grep -i Mem
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        </item>
        <item>
        <title>vagrant 筆記</title>
        <link>http://shawn1251.github.io/zh-tw/post/vagrant-intro/</link>
        <pubDate>Sat, 28 Oct 2023 00:00:00 +0800</pubDate>
        
        <guid>http://shawn1251.github.io/zh-tw/post/vagrant-intro/</guid>
        <description>&lt;p&gt;一個command line tool方便自動化啟動VM。vagrant本身不是hypervisor，而是基於hypervisor上的一層應用，令使用者可以利用他快速架設VM於hypervisor上。本身也不需要OS image，設定檔Vagrantfile中指定的image(box)會從vagrant cloud取用。在Vagrantfile中定義所需要的參數，即可使用&lt;code&gt;vagrant up&lt;/code&gt;啟動&lt;/p&gt;
&lt;h2 id=&#34;常用指令&#34;&gt;常用指令&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;vagrant init {box name}&lt;/li&gt;
&lt;li&gt;vagrant up&lt;/li&gt;
&lt;li&gt;vagrant ssh&lt;/li&gt;
&lt;li&gt;vagrant halt&lt;/li&gt;
&lt;li&gt;vagrant destroy&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;流程&#34;&gt;流程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;create folder&lt;/li&gt;
&lt;li&gt;create Vagrantfile&lt;/li&gt;
&lt;li&gt;vagrant up&lt;/li&gt;
&lt;li&gt;vagrant ssh&lt;/li&gt;
&lt;li&gt;vagrant halt/destroy&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;啟動範例&#34;&gt;啟動範例&lt;/h2&gt;
&lt;p&gt;請在這邊找尋自己想要啟動的 box &lt;a class=&#34;link&#34; href=&#34;https://app.vagrantup.com/boxes/search&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://app.vagrantup.com/boxes/search&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;vagrant init {box name}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;vagrant up
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;vagrant global-status
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;vagrantfile-的-provision&#34;&gt;Vagrantfile 的 provision&lt;/h2&gt;
&lt;p&gt;Vagrantfile 中有一段 provision，可以用於設定vm第一次啟動前要執行的指令，好比安裝指定的軟體。可以參考官方對Vagrantfile的說明&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 這邊以在provision階段安裝apache2 server為例
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   config.vm.provision &amp;#34;shell&amp;#34;, inline: &amp;lt;&amp;lt;-SHELL
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     apt-get update
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     apt-get install -y apache2
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   SHELL
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        </item>
        <item>
        <title>安裝chocolatey</title>
        <link>http://shawn1251.github.io/zh-tw/post/install-chocolatey/</link>
        <pubDate>Tue, 24 Oct 2023 06:42:46 +0800</pubDate>
        
        <guid>http://shawn1251.github.io/zh-tw/post/install-chocolatey/</guid>
        <description>&lt;p&gt;chocolatey 是windows上一個安裝軟體的工具。我以前都是使用macOS為主，chocolatey就像是mac上的brew一樣。有了他，安裝軟體變得方便許多。&lt;/p&gt;
&lt;h2 id=&#34;安裝&#34;&gt;安裝&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Get-ExecutionPolicy&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# 若為 restricted，以系統管理員執行powershell後輸入以下指令&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Set-ExecutionPolicy&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AllSigned&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# 輸入Y or A 完成權限設定&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Set-ExecutionPolicy&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Bypass&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Scope&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;Process&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Force&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;iex &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;New-Object&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;Net&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WebClient&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;DownloadString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;https://chocolatey.org/install.ps1&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# 最後執行`choco`來確認是否有安裝成功&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;choco&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;使用&#34;&gt;使用&lt;/h2&gt;
&lt;p&gt;我們可以前往 &lt;a class=&#34;link&#34; href=&#34;https://community.chocolatey.org/packages&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://community.chocolatey.org/packages&lt;/a&gt; 網站上搜尋目標的軟體
好比我們搜尋virtual box，就可以看見他將指令寫在後方&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;choco&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;install&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;virtualbox&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;執行指令後就會自動安裝了!&lt;/p&gt;
</description>
        </item>
        <item>
        <title>設定github page</title>
        <link>http://shawn1251.github.io/zh-tw/post/setting-your-first-githubpage/</link>
        <pubDate>Sat, 21 Oct 2023 06:42:46 +0800</pubDate>
        
        <guid>http://shawn1251.github.io/zh-tw/post/setting-your-first-githubpage/</guid>
        <description>&lt;p&gt;本篇文章用來記錄這次以Hugo建立Blog後發佈到GitHub Page的過程。
GitHub本身有個免費的個人網站服務稱作GitHub Page。只要將想要發布的網頁內容上傳到指定格式的repository即可。&lt;/p&gt;
&lt;h2 id=&#34;事前準備&#34;&gt;事前準備&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/signup&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GitHub 帳號&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://git-scm.com/book/en/v2/Getting-Started-Installing-Git&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;安裝 git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;你的目標網站&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;建立&#34;&gt;建立&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;點擊repository，New&lt;/li&gt;
&lt;li&gt;在repository name這個欄位填入&amp;quot;{你的帳號}&amp;quot;.github.io&lt;/li&gt;
&lt;li&gt;點擊 create repository&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;上傳&#34;&gt;上傳&lt;/h2&gt;
&lt;p&gt;接下來我們就要將本地端的網站推送到github上，若沒有網站僅是想要做測試，可以簡單建立一個&lt;code&gt;index.html&lt;/code&gt;做測試&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 為當前網站建立git&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git init
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 加入stage並commit&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git add .
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git commit -m &lt;span class=&#34;s2&#34;&gt;&amp;#34;first commit&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 建立main分支&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git branch -M main
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 將遠端repository加入設定並命名為origin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git remote add origin https://github.com/&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;你的帳號&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;/&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;你的帳號&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;.github.io.git
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 將當前專案push到github上&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git push -u origin main
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;檢視&#34;&gt;檢視&lt;/h2&gt;
&lt;p&gt;正常的話，前往&lt;code&gt;https://{你的帳號}.github.io&lt;/code&gt;就能看到剛才推上去的網頁了!&lt;/p&gt;
&lt;h2 id=&#34;以hugo為例建立網站並上傳&#34;&gt;以Hugo為例，建立網站並上傳&lt;/h2&gt;
&lt;p&gt;承接上一篇&lt;a class=&#34;link&#34; href=&#34;http://shawn1251.github.io/zh-tw/post/first-post/&#34; &gt;以Hugo建立第一篇Post&lt;/a&gt;，我們可以利用GitHub Page對成果進行發布。
記得更改config中的baseURL&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# build&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;hugo
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 進入靜態網站的資料夾&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; public
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 承上說明不贅述&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git init
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git add .
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git commit -m &lt;span class=&#34;s2&#34;&gt;&amp;#34;first commit&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git branch -M main
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git remote add origin https://github.com/&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;你的帳號&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;/&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;你的帳號&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;.github.io.git
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git push -u origin main
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        </item>
        <item>
        <title>First Post with Hugo</title>
        <link>http://shawn1251.github.io/zh-tw/post/first-post/</link>
        <pubDate>Fri, 20 Oct 2023 00:00:00 +0800</pubDate>
        
        <guid>http://shawn1251.github.io/zh-tw/post/first-post/</guid>
        <description>&lt;p&gt;這次心血來潮決定將一些過往的筆記進行整理，在尋找平台的時候參考了友人的建議選擇了Hugo搭配github page。以下就來記錄一下過程。&lt;/p&gt;
&lt;h1 id=&#34;hugo&#34;&gt;Hugo&lt;/h1&gt;
&lt;p&gt;簡單介紹一下Hugo， &lt;a class=&#34;link&#34; href=&#34;https://gohugo.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Hugo&lt;/a&gt; 是用Golang開發的靜態網站產生工具。靜態網站不依賴後端，速度快又不必架設資料庫，特別適合開發展示用的網站。以前很流行使用wordpress架設個人網站，
相較於這種功能豐富的CMS，若需求單純，其實更加推薦使用靜態網站，同樣類型的工具還有 &lt;a class=&#34;link&#34; href=&#34;https://hexo.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Hexo&lt;/a&gt; 與 &lt;a class=&#34;link&#34; href=&#34;https://jekyllrb.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Jekyll&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;Hugo的本身由Golang開發，所以我們在使用的時候僅需要安裝編譯好的Hugo執行檔，不用再安裝其他相依語言如ruby、js。我們可以先瀏覽一下別人建立好的 &lt;a class=&#34;link&#34; href=&#34;https://themes.gohugo.io/tags/blog&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Hugo template&lt;/a&gt; 想像一下之後的作品效果。&lt;/p&gt;
&lt;h2 id=&#34;installation&#34;&gt;installation&lt;/h2&gt;
&lt;p&gt;我們這邊參照官方的教學 &lt;a class=&#34;link&#34; href=&#34;https://gohugo.io/getting-started/quick-start/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://gohugo.io/getting-started/quick-start/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;安裝hugo&#34;&gt;安裝Hugo&lt;/h3&gt;
&lt;p&gt;請根據自己的作業系統選擇 &lt;a class=&#34;link&#34; href=&#34;https://gohugo.io/installation/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;安裝方法&lt;/a&gt;。
我是使用ubuntu系統，這邊預設已經安裝git，安裝語法如下。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 先安裝sass套件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo snap install dart-sass
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 安裝hugo&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo snap install hugo
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;安裝完成後可以執行檢查版本&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;hugo --version
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;嘗試建立第一個專案&#34;&gt;嘗試建立第一個專案&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 建立專案&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;hugo new site quickstart
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; quickstart
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git init
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 加入theme ananke 作為git的submodule，方便與原專案分離更新&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 對當前專案指定使用ananke作為theme&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;theme = &amp;#39;ananke&amp;#39;&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; hugo.toml
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 執行web server顯示成果&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;hugo server
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;加入內容&#34;&gt;加入內容&lt;/h3&gt;
&lt;p&gt;執行上述步驟後應該已經能夠看到一個首頁黑白的簡單homepage了。
接著我們要加入個人的內容，我們可以使用hugo內建的指令&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 建立一個叫做my-first-post的post&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;hugo new content posts/my-first-post.md
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;此時我們再去&lt;code&gt;content/posts/&lt;/code&gt;下就會看到出現了一個md檔案&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;+++
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;title = &amp;#39;My First Post&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;date = 2023-10-20T21:37:17+08:00
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;draft = true
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;+++
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;與空白專案的內容不同，他的開頭會有這樣的文字。須注意這是hugo的markdown必要的metadata，如果刪除了就不會出現在首頁上了。
我們接著加上幾行自己的內容。參照 &lt;a class=&#34;link&#34; href=&#34;https://markdown.tw/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;markdown語法教學&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;+++
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;title = &amp;#39;My First Post&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;date = 2023-10-20T21:37:17+08:00
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;draft = false
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;+++
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gh&#34;&gt;# hello world
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gh&#34;&gt;&lt;/span&gt;hello
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;這邊須注意要將draft改回false，否則&lt;code&gt;hugo server&lt;/code&gt;會不顯示，相對的需要使用&lt;code&gt;hugo server -D&lt;/code&gt;的模式才會顯示草稿內容。&lt;/p&gt;
&lt;h3 id=&#34;發布&#34;&gt;發布&lt;/h3&gt;
&lt;p&gt;只要執行指令&lt;code&gt;hugo&lt;/code&gt;就能開始根據內容進行打包建置。結果會在&lt;code&gt;public&lt;/code&gt;資料夾中。如果你剛好也有python3，我們可以執行內建的http server做簡單測試。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; public
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;python3 -m http.server
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;預設會在port 8000上，我們打開瀏覽器&lt;code&gt;localhost:8000&lt;/code&gt;就能看到本次建置的靜態網站了。&lt;/p&gt;
&lt;h2 id=&#34;問題&#34;&gt;問題&lt;/h2&gt;
&lt;h3 id=&#34;我要如何客製化模板&#34;&gt;我要如何客製化模板?&lt;/h3&gt;
&lt;p&gt;一般來說模板都有自己的document可以提供客製化需求。如這個blog使用的是 &lt;a class=&#34;link&#34; href=&#34;https://github.com/CaiJimmy/hugo-theme-stack&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;stack&lt;/a&gt; 。我在這個模板中遇到的問題就是要加入不存在theme當中的幾個icon。所以我要做的步驟會是前往原 repository fork 一份到自己的repository下，再進行客製化加入icon。&lt;/p&gt;
&lt;h3 id=&#34;找到了喜歡的模板不知道怎麼開始&#34;&gt;找到了喜歡的模板不知道怎麼開始?&lt;/h3&gt;
&lt;p&gt;通常模板專案下有基礎的 example site 可以參考他使怎麼使用這個模板的。以 &lt;a class=&#34;link&#34; href=&#34;https://github.com/CaiJimmy/hugo-theme-stack&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;stack&lt;/a&gt; 為例，他存在&lt;code&gt;exampleSite&lt;/code&gt;這個資料夾，裡面涵蓋了content與config.yaml等，可以直接將他複製出來到專案目錄中檢視。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>About</title>
        <link>http://shawn1251.github.io/zh-tw/page/about/</link>
        <pubDate>Sun, 01 Oct 2023 00:00:00 +0000</pubDate>
        
        <guid>http://shawn1251.github.io/zh-tw/page/about/</guid>
        <description>&lt;p&gt;一個善於溝通、負責任且具有邏輯思維的人，能夠團隊合作也擅長獨立作業。喜歡運動與料理。熱衷於學習未知的事物，目前正在自學嵌入式系統開發。&lt;/p&gt;
&lt;h2 id=&#34;經歷&#34;&gt;經歷&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;CEO &amp;amp; Software Engineer at 相位資訊 (2019/06 - 2023-07)&lt;/li&gt;
&lt;li&gt;Software Engineer at 國立臺灣海洋大學 (2018/01 - 2019/06)&lt;/li&gt;
&lt;li&gt;Consultant &amp;amp; IT Support at 一芳水果茶(英國) &amp;amp; JIABA London (2017/08 - 2018/01)&lt;/li&gt;
&lt;li&gt;MIS at 航空警察局資訊室-替代役 (2016/08 - 2017/08)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;學歷&#34;&gt;學歷&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;國立臺灣海洋大學 資訊工程學系 碩士 (2020/01 - 2021/07)&lt;/li&gt;
&lt;li&gt;國立臺灣海洋大學 資訊工程學系 學士 (2012/09 - 2016/06)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;技能&#34;&gt;技能&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Programming Language:
&lt;ul&gt;
&lt;li&gt;Python, C++, TypeScript C, C#, Golang&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Database:
&lt;ul&gt;
&lt;li&gt;MongoDB, Redis, Postgres&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Other:
&lt;ul&gt;
&lt;li&gt;Linux, Docker, Shell script, Celery, FastAPI, flask, Vue3, React, Nginx&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Archives</title>
        <link>http://shawn1251.github.io/zh-tw/page/archives/</link>
        <pubDate>Sun, 01 Oct 2023 00:00:00 +0000</pubDate>
        
        <guid>http://shawn1251.github.io/zh-tw/page/archives/</guid>
        <description></description>
        </item>
        <item>
        <title>Search</title>
        <link>http://shawn1251.github.io/zh-tw/page/search/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://shawn1251.github.io/zh-tw/page/search/</guid>
        <description></description>
        </item>
        
    </channel>
</rss>
