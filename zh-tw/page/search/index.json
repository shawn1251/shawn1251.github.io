[{"content":"本篇筆記是來自心河擺渡-成瘾始于痛苦，戒瘾终于平衡！深度解读多巴胺，用身体内稳态戒瘾 。影片中有作者自己的心得分享以及他對Anna Lembke的著作Drug Dealer, MD: How Doctors Were Duped, Patients Got Hooked, and Why It’s So Hard to Stop 的一些整理。內容十分受用，特地作筆記提醒自己。\n成癮的背景 成癮的原因在於提升的多巴胺 巧克力提升55% 尼古丁提高150% 苯丙胺提高1000% 多巴胺的主要作用不是在獲得獎勵後感到快樂，而是驅動人們追求獎勵的動機 好比看到巧克力時，多巴胺會啟動腦中獎賞迴路，還沒食用就能感受到愉悅，進而產生食用的衝動 大腦中產生快樂的區域與產生痛苦的區域是重疊的 快樂與痛苦有自我調節功能，當現在快樂的同時，大腦會在另一端產生足夠的痛苦來平衡 獎賞預測誤差 因為神經適應，實際的獎勵要超出預期才會令多巴胺有好的效果 重度成癮者，感受快樂的門檻會越來越高，造成快感缺失 利用多巴胺機制 根據臨床經驗，重製大腦獎賞迴路最短需要一個月 以痛治痛 大腦會用痛苦平衡快樂，反過來用痛苦平衡快樂 根據研究，人浸泡在冷水中，血漿中的多巴胺濃度增加250%，而且持續時間超過浸泡的時間 運動是最好的選擇 物理阻斷 與成癮物徹底分開 激進誠實 前額葉皮質負責理性決策 在多巴胺獎勵迴路發生時，說謊會抑制前額葉皮質作用，停止對獎勵迴路的約束，造成大腦認為自己沒有上癮 在戒癮當中重要的一環就是重建前額葉皮質與多巴胺迴路的關係 透過\u0026quot;說實話\u0026quot;強化前額葉皮質，提高自控力 在成癮時，與自我對話或是對身邊的人宣布自己有什麼癮 ","date":"2023-11-06T00:00:00+08:00","permalink":"http://shawn1251.github.io/zh-tw/post/addiction-recovery/","title":"Addiction Recovery"},{"content":"最近在 Udemy 上學習 DevOps Beginners to Advanced with Projects。在此做一些關於 AWS 使用上的筆記。\nOriginal Application Stack 專案github\nNginx Apache Tomcat RabbitMQ Memcache Mysql 移轉目標 EC2 vm for tomcat, rabbitmq,memcache, mysql ELB nginx load balancer Autoscaling automation for vm scaling S3/EFS shared storage route53 private dns service 目標架構圖 flow of execution Create key pairs Create security groups 此處切為三組: LB(取代nginx) APP(tomcat) Backend(包含rabbitmq, memcache, mysql) Launch instance with user data 目前還是半自動化的流程 手動建立intance並且於userdata中貼上環境安裝設定的shell Update ip to name mapping in route53 這邊設定一個內部DNS，讓instance之間的溝通可以用hostname Build application from source code 這邊仍是半自動化的部分，我們在local端將java的專案build完畢 Upload to S3 bucket 使用aws cli上傳build的java war至APP instance Download artifact to Tomcat EC2 instance 之前在local端是使用key的方式來連接s3 此處instance連接S3練習使用IAM role 於IAM建立新的S3 access role 於APP instance中加入建立的role aws s3 ls即可確認是否通過 Setup ELB with https(cert from amazon certificate manager) 建立target group 須注意這邊是要通向app的8080port 建立LB 設定listen HTTP/HTTPS routing 至 target group 購買網域後於aws的certificate manager申請ssl cert secure listener 選用from ACM，使用剛剛的ssl cert Map ELB endpoint to website name in DNS 於DNS提供商(此處是用godaddy)，建立CNAME，並轉向AWS LB的domain Verify DNS的設定通常會需要一點時間 可以直接先access LB的domain檢查80有沒有APP出現 Build autoscaling group for tomcat instance autoscaling三個步驟 AMI 此處我們以app作為目標，將當前的app instance create image launch template 使用剛建立的AMI，security group 與原本的APP相同 autoscaling group attach to existing load balancer 選擇load balancer使用的target group 設定scaling policy，可以使用CPU用量或是network in/out 設定notification ","date":"2023-11-02T00:00:00+08:00","permalink":"http://shawn1251.github.io/zh-tw/post/aws-note-shift-to-cloud/","title":"AWS 筆記-專案轉移至雲端"},{"content":"最近在 Udemy 上學習 DevOps Beginners to Advanced with Projects。在此做一些關於 AWS 使用上的筆記\n建立EC2 最基本的執行單位\nName and Tag 這邊可以選用 add additional tag，多補充標籤，方便在aws console上可以快速搜尋指定的instance AMI AMI 是image，有點類似docker上取用image後run成container，但在此是run 成 instance instance type 由於目前是 free tier，只使用過 t2.micro。實際使用情境可以根據需求選擇不同等級的資源 key pair 由於aws在遠端登入時都是採用ssh key，因次在這個階段要選用此instance的key pair。 方便的是一組key pair可以被重複使用在不同instance上。可因應實際使用作key pair管理 network setting 主要在建立進出規則 通常會打開的in bound是ssh，source的部分可以加入my ip 如果是網頁服務用instance，一般會加入HTTP，並且source為anywhere configure storage storage分成很多類型。好比SSD，HDD，磁帶，也有根據IO做的特化型 advanced 此處我使用到的是 User data 這一個欄位。這部分可以直接寫上shell，方便在啟動的時候就預先裝載軟體或完成相關設定 Elastic Block Store 儲存體\nvolume type storage分成很多類型。好比SSD，HDD，磁帶，也有根據IO做的特化型 還可以選擇建立地區 aws 裡volume可以動態attach attach 在指定的instance fdisk -l 可以檢查該volume的名稱 fdisk /dev/xvdf 這個路徑可能有所不同，根據前一個指令取得的dev更換 m 可以檢視可用指令 n new partition p primary partition number: default 1 First sector: default 2048 Last sector: default w write table to disk mkfs.ext4 /dev/xvdf1: 這個指令可以根據要使用的format做更換，本處使用ext4 使用 lsblk 檢查是否出現 mount /dev/xvdf1 {target path} 就能進行掛載 如果要讓其自動掛載，請修改/etc/fstab。往後就能開機自動掛載也可使用mount -a snapshot 通常主要的資料都會使用另外的volume，好比database的data 我們可以使用 EBS 中的 snapshot 功能，為當前的volume進行備份 之後一旦有需要進行還原，就可以對指定的snapshot執行create volume from snapshot，就可以將當時的內容重新掛載到instance上 Load Balancing 以兩個執行同樣http server的instances做example\n建立target group target group 的health check用來確認instance是否正常，如果是網頁伺服器，可以設定http路徑定時對指定頁面進行請求 將目標的instances拉入target group 建立load balancer 先以 Application Load Balance 為 example security group 由於是web server，要設定inbound 為 HTTP ipv4/v6 anywhere listener \u0026amp; routing 設定為轉發到剛才創建的target group 回頭設定target group的security group 因為剛剛並沒有設定load balancer所在的security group可以access到target group。因此要將load balancer所在的security group加入target group 的security 中。 inbound HTTP custom {sg id} Cloud Watch 可以用來建立警告，此處以cpu資源作作為example\nall alarm -\u0026gt; create alarm select metric -\u0026gt; ec2 -\u0026gt; pre instance metric 尋找目標的instance id，並選取CPUUtilization 在greater than..的部分設定想要的百分比，好比60 最後，設定通知的內容還有對象email或群組 EFS 這有點類似我們linux上在用的NFS，適合作為多個instance共同的儲存空間\n建立security group 由於EFS是基於網路的連線，所以必須先設定security group 將inbound 加入 NFS，source 為目標instance的security group EFS -\u0026gt; create file system 這邊練習用的performance setting使用預設的enhanced, elastic即可。實際使用根據需求調整 Network setting這邊所有availability zone的security group 都選擇剛剛新建立給EFS用的security group。 建立access point file system 選擇剛建立的file system id 從EC2進行mount 連線EFS要一些工具，執行sudo yum install -y amazon-efs-utils安裝。這部分可以參考官方文件 接下來設定/etc/fstab 加入這一行 {file-system-id}:/ {efs-mount-point} efs _netdev,noresvport,tls,accesspoint={access-point-id} 0 0 可參考官方文件 執行mount -fav。若出現 {mount-point} : successfully mounted，就完成了 ","date":"2023-10-31T00:00:00+08:00","permalink":"http://shawn1251.github.io/zh-tw/post/aws-note/","title":"AWS 筆記"},{"content":"對於有在使用linux的初階使用者，cp mv ls 等的指令應該都用的很熟練了。這邊要筆記的是我一些常用但也花了一段時間才熟練的指令\ncat 大多數使用cat是用來顯示檔案的內容，如 cat {your file}。但其實他還有連結兩個檔案，與創建檔案寫入的功能\n連接兩檔案 cat {file1} {file2} \u0026gt; {merged file} 創建新檔案並寫入 cat \u0026gt; {your file} 他會接收你接下來的輸入並寫入檔案 所以有些自動化腳本會使用這個指令來自動化創建檔案 1 2 3 cat \u0026gt; testFile \u0026lt;\u0026lt; EOF {your content} EOF grep 1 grep -R SELINUX /etc/* -i 忽略大小寫 -R 包含子資料夾 -v 反向，輸出關鍵字以外的內容 cut 可以用來快速提取固定格式檔案中的內容。好比/etc/passwd 中，可以看見內容都是以\u0026quot;:\u0026ldquo;做分隔\n1 2 root:x:0:0:root:/root:/bin/bash vagrant:x:1000:1000::/home/vagrant:/bin/bash 此時我們用cut指令\n1 cut -d: -f1 /etc/passwd -d 是切分的參數，後面接著\u0026rdquo;:\u0026ldquo;代表要以\u0026rdquo;:\u0026ldquo;做分隔 -f1 是要提取切分後的field 1的意思，此處取出的部分會是username 出來的output就會是\n1 2 root vagrant awk 前一個指令cut適用於有適合的separator，當變化較複雜時我們使用awk。如果是上述的例子改用awk改寫會是:\n1 awk -F\u0026#39;:\u0026#39; \u0026#39;{print $1}\u0026#39; /etc/passwd -F 是用來定義sepeartor {print $1} 是用來定義輸出，此處是輸出切分後的第一位 sed 用來做文字取代，注意的是他是對stream做取代，所以不會覆蓋到原本文件。舉例如下:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 echo \u0026#34;this is a book.\u0026#34; \u0026gt; test # 建立一個範例文字 sed \u0026#39;s/book/dog/g\u0026#39; test \u0026gt; this is a dog. # 他將文字輸出的book替換成dog # s 為search # g 為global # test 可以替換成\u0026#39;*\u0026#39;，更改複數個檔案 cat test \u0026gt; this is a book. # 原本的檔案沒有變化 # 如果要覆蓋，可以加上 -i sed -i \u0026#39;s/book/dog/g\u0026#39; test cat test \u0026gt; this is a dog. redirection 我們在對linux下指令的輸出預設是在螢幕上，而我們也可以將輸出進行導向轉移到file。 以下有幾個重點:\n\u0026gt; 會對輸出對象覆蓋，\u0026gt;\u0026gt; 是append 1是stdout, 2是stderr 可以使用\u0026amp;對所有輸出都進行導向 1 2 3 4 5 6 7 8 9 # 當目標是導出stdout，不用特別加上1 ls \u0026gt;\u0026gt; tmpfile # lss 為不存在指令，bash會報錯，此時可以將他報錯的stderr進行導出。 lss 2\u0026gt;\u0026gt; tmpfile # \u0026amp;符號代表將stdout stderr都導出 ls \u0026amp;\u0026gt;\u0026gt; tmpfile lss \u0026amp;\u0026gt;\u0026gt; tmpfile pipe 使用pipe |將輸出作為下個指令的輸入。\n1 2 3 4 5 # 我們將ls輸出給wc計算行數 ls | wc -l # 將free輸出的mem欄位提取出來 free | grep -i Mem ","date":"2023-10-30T00:00:00+08:00","permalink":"http://shawn1251.github.io/zh-tw/post/shell-cmd-filter/","title":"常用於filter的shell command "},{"content":"一個command line tool方便自動化啟動VM。vagrant本身不是hypervisor，而是基於hypervisor上的一層應用，令使用者可以利用他快速架設VM於hypervisor上。本身也不需要OS image，設定檔Vagrantfile中指定的image(box)會從vagrant cloud取用。在Vagrantfile中定義所需要的參數，即可使用vagrant up啟動\n常用指令 vagrant init {box name} vagrant up vagrant ssh vagrant halt vagrant destroy 流程 create folder create Vagrantfile vagrant up vagrant ssh vagrant halt/destroy 啟動範例 請在這邊找尋自己想要啟動的 box https://app.vagrantup.com/boxes/search\n1 2 3 vagrant init {box name} vagrant up vagrant global-status Vagrantfile 的 provision Vagrantfile 中有一段 provision，可以用於設定vm第一次啟動前要執行的指令，好比安裝指定的軟體。可以參考官方對Vagrantfile的說明\n1 2 3 4 5 6 # 這邊以在provision階段安裝apache2 server為例 config.vm.provision \u0026#34;shell\u0026#34;, inline: \u0026lt;\u0026lt;-SHELL apt-get update apt-get install -y apache2 SHELL ","date":"2023-10-28T00:00:00+08:00","permalink":"http://shawn1251.github.io/zh-tw/post/vagrant-intro/","title":"vagrant 筆記"},{"content":"chocolatey 是windows上一個安裝軟體的工具。我以前都是使用macOS為主，chocolatey就像是mac上的brew一樣。有了他，安裝軟體變得方便許多。\n安裝 1 2 3 4 5 6 7 Get-ExecutionPolicy # 若為 restricted，以系統管理員執行powershell後輸入以下指令 Set-ExecutionPolicy AllSigned # 輸入Y or A 完成權限設定 Set-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).DownloadString(\u0026#39;https://chocolatey.org/install.ps1\u0026#39;)) # 最後執行`choco`來確認是否有安裝成功 choco 使用 我們可以前往 https://community.chocolatey.org/packages 網站上搜尋目標的軟體 好比我們搜尋virtual box，就可以看見他將指令寫在後方\n1 choco install virtualbox 執行指令後就會自動安裝了!\n","date":"2023-10-24T06:42:46+08:00","permalink":"http://shawn1251.github.io/zh-tw/post/install-chocolatey/","title":"安裝chocolatey"},{"content":"本篇文章用來記錄這次以Hugo建立Blog後發佈到GitHub Page的過程。 GitHub本身有個免費的個人網站服務稱作GitHub Page。只要將想要發布的網頁內容上傳到指定格式的repository即可。\n事前準備 GitHub 帳號 安裝 git 你的目標網站 建立 點擊repository，New 在repository name這個欄位填入\u0026quot;{你的帳號}\u0026quot;.github.io 點擊 create repository 上傳 接下來我們就要將本地端的網站推送到github上，若沒有網站僅是想要做測試，可以簡單建立一個index.html做測試\n1 2 3 4 5 6 7 8 9 10 11 # 為當前網站建立git git init # 加入stage並commit git add . git commit -m \u0026#34;first commit\u0026#34; # 建立main分支 git branch -M main # 將遠端repository加入設定並命名為origin git remote add origin https://github.com/{你的帳號}/{你的帳號}.github.io.git # 將當前專案push到github上 git push -u origin main 檢視 正常的話，前往https://{你的帳號}.github.io就能看到剛才推上去的網頁了!\n以Hugo為例，建立網站並上傳 承接上一篇以Hugo建立第一篇Post，我們可以利用GitHub Page對成果進行發布。 記得更改config中的baseURL\n1 2 3 4 5 6 7 8 9 10 11 # build hugo # 進入靜態網站的資料夾 cd public # 承上說明不贅述 git init git add . git commit -m \u0026#34;first commit\u0026#34; git branch -M main git remote add origin https://github.com/{你的帳號}/{你的帳號}.github.io.git git push -u origin main ","date":"2023-10-21T06:42:46+08:00","permalink":"http://shawn1251.github.io/zh-tw/post/setting-your-first-githubpage/","title":"設定github page"},{"content":"這次心血來潮決定將一些過往的筆記進行整理，在尋找平台的時候參考了友人的建議選擇了Hugo搭配github page。以下就來記錄一下過程。\nHugo 簡單介紹一下Hugo， Hugo 是用Golang開發的靜態網站產生工具。靜態網站不依賴後端，速度快又不必架設資料庫，特別適合開發展示用的網站。以前很流行使用wordpress架設個人網站， 相較於這種功能豐富的CMS，若需求單純，其實更加推薦使用靜態網站，同樣類型的工具還有 Hexo 與 Jekyll。\nHugo的本身由Golang開發，所以我們在使用的時候僅需要安裝編譯好的Hugo執行檔，不用再安裝其他相依語言如ruby、js。我們可以先瀏覽一下別人建立好的 Hugo template 想像一下之後的作品效果。\ninstallation 我們這邊參照官方的教學 https://gohugo.io/getting-started/quick-start/\n安裝Hugo 請根據自己的作業系統選擇 安裝方法。 我是使用ubuntu系統，這邊預設已經安裝git，安裝語法如下。\n1 2 3 4 # 先安裝sass套件 sudo snap install dart-sass # 安裝hugo sudo snap install hugo 安裝完成後可以執行檢查版本\n1 hugo --version 嘗試建立第一個專案 1 2 3 4 5 6 7 8 9 10 # 建立專案 hugo new site quickstart cd quickstart git init # 加入theme ananke 作為git的submodule，方便與原專案分離更新 git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke # 對當前專案指定使用ananke作為theme echo \u0026#34;theme = \u0026#39;ananke\u0026#39;\u0026#34; \u0026gt;\u0026gt; hugo.toml # 執行web server顯示成果 hugo server 加入內容 執行上述步驟後應該已經能夠看到一個首頁黑白的簡單homepage了。 接著我們要加入個人的內容，我們可以使用hugo內建的指令\n1 2 # 建立一個叫做my-first-post的post hugo new content posts/my-first-post.md 此時我們再去content/posts/下就會看到出現了一個md檔案\n1 2 3 4 5 +++ title = \u0026#39;My First Post\u0026#39; date = 2023-10-20T21:37:17+08:00 draft = true +++ 與空白專案的內容不同，他的開頭會有這樣的文字。須注意這是hugo的markdown必要的metadata，如果刪除了就不會出現在首頁上了。 我們接著加上幾行自己的內容。參照 markdown語法教學\n1 2 3 4 5 6 7 8 +++ title = \u0026#39;My First Post\u0026#39; date = 2023-10-20T21:37:17+08:00 draft = false +++ # hello world hello 這邊須注意要將draft改回false，否則hugo server會不顯示，相對的需要使用hugo server -D的模式才會顯示草稿內容。\n發布 只要執行指令hugo就能開始根據內容進行打包建置。結果會在public資料夾中。如果你剛好也有python3，我們可以執行內建的http server做簡單測試。\n1 2 cd public python3 -m http.server 預設會在port 8000上，我們打開瀏覽器localhost:8000就能看到本次建置的靜態網站了。\n問題 我要如何客製化模板? 一般來說模板都有自己的document可以提供客製化需求。如這個blog使用的是 stack 。我在這個模板中遇到的問題就是要加入不存在theme當中的幾個icon。所以我要做的步驟會是前往原 repository fork 一份到自己的repository下，再進行客製化加入icon。\n找到了喜歡的模板不知道怎麼開始? 通常模板專案下有基礎的 example site 可以參考他使怎麼使用這個模板的。以 stack 為例，他存在exampleSite這個資料夾，裡面涵蓋了content與config.yaml等，可以直接將他複製出來到專案目錄中檢視。\n","date":"2023-10-20T00:00:00+08:00","permalink":"http://shawn1251.github.io/zh-tw/post/first-post/","title":"First Post with Hugo"}]