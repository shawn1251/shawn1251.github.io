[{"content":"This article is here to document the process of building a blog using Hugo and publishing it on GitHub Pages. GitHub provides a free personal website service called GitHub Pages. You can upload your web content to a designated format repository to make it live.\nPreparations GitHub account Install Git Your target website Setup Click on \u0026ldquo;repository,\u0026rdquo; then \u0026ldquo;New.\u0026rdquo; In the \u0026ldquo;repository name\u0026rdquo; field, enter \u0026ldquo;{your account name}.github.io.\u0026rdquo; Click \u0026ldquo;create repository.\u0026rdquo; Upload Next, we\u0026rsquo;ll push the local website to GitHub. If you don\u0026rsquo;t have a website and just want to test, you can simply create an index.html for testing.\n1 2 3 4 5 6 7 8 9 10 11 # Initialize git for the current website git init # Add to the stage and commit git add . git commit -m \u0026#34;first commit\u0026#34; # Create the main branch git branch -M main # Add the remote repository and name it origin git remote add origin https://github.com/{your account}/{your account}.github.io.git # Push the current project to GitHub git push -u origin main View If everything is fine, you can visit https://{your account}.github.io to see the web page you just pushed!\nUsing Hugo: Building the Site and Uploading Continuing from the previous article, \u0026ldquo;Creating the First Post with Hugo\u0026rdquo;, we can use GitHub Pages to publish our results. Remember to change the baseURL in your config.\n1 2 3 4 5 6 7 8 9 10 11 # Build hugo # Navigate to the static website folder cd public # As explained above git init git add . git commit -m \u0026#34;first commit\u0026#34; git branch -M main git remote add origin https://github.com/{your account}/{your account}.github.io.git git push -u origin main ","date":"2023-10-21T06:42:46+08:00","permalink":"http://shawn1251.github.io/post/setting-your-first-githubpage/","title":"Setting GitHub page"},{"content":"I had a sudden inspiration to organize some of my past notes, and when looking for a platform, I took a friend\u0026rsquo;s advice and chose Hugo with GitHub Pages. Here, I\u0026rsquo;ll document the process.\nHugo Let me briefly introduce Hugo. Hugo is a static website generator developed in Golang. Static websites don\u0026rsquo;t rely on a backend, they\u0026rsquo;re fast, and you don\u0026rsquo;t need to set up a database, making them ideal for showcasing websites. In the past, many people used CMS, like WordPress, to create personal websites. However, for simpler needs, using static websites is recommended. Similar tools include Hexo and Jekyll.\nSince Hugo is developed in Golang, you only need to install the pre-compiled Hugo executable when using it, without the need for other languages like Ruby or JavaScript. You can start by browsing some pre-built Hugo template to get an idea of what your future project could look like.\nHere, we\u0026rsquo;ll follow the official guide: https://gohugo.io/getting-started/quick-start/\nInstalling Hugo Choose the appropriate installation method based on your operating system. I\u0026rsquo;m using Ubuntu, and assuming you already have Git installed, you can use the following commands:\n1 2 3 4 # First, install the Sass package sudo snap install dart-sass # Install Hugo sudo snap install hugo After installation, you can check the version:\n1 hugo --version Trying Your First Project 1 2 3 4 5 6 7 8 9 10 # Create a new project hugo new site quickstart cd quickstart git init # Add the \u0026#39;ananke\u0026#39; theme as a Git submodule for easier updates git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke # Specify \u0026#39;ananke\u0026#39; as the theme for the current project echo \u0026#34;theme = \u0026#39;ananke\u0026#39;\u0026#34; \u0026gt;\u0026gt; hugo.toml # Run a web server to see the results hugo server Adding Content After following the above steps, you should see a simple black-and-white homepage. Now, you can add your own content using Hugo\u0026rsquo;s built-in commands:\n1 2 # Create a post named \u0026#39;my-first-post\u0026#39; hugo new content posts/my-first-post.md This will create an .md file under content/posts/. It will contain the following metadata, which is necessary for Hugo\u0026rsquo;s markdown:\n1 2 3 4 5 +++ title = \u0026#39;My First Post\u0026#39; date = 2023-10-20T21:37:17+08:00 draft = true +++ Unlike the content in the blank markdown, this one has the above metadata which is necessary. Let\u0026rsquo;s add some extra content using markdown. markdown instruction\n1 2 3 4 5 6 7 8 +++ title = \u0026#39;My First Post\u0026#39; date = 2023-10-20T21:37:17+08:00 draft = false +++ # hello world hello Be sure to change draft to false if you want your content to appear on the homepage. Otherwise, you need to use hugo server -D to display draft content.\nPublishing Simply run the hugo command to begin building based on your content. The results will be in the public folder. If you also have Python 3, you can run the built-in HTTP server for a simple test:\n1 2 cd public python3 -m http.server It will run on port 8000 by default. You can open your browser and go to localhost:8000 to see the static site.\nQuestions How can I customize the template? Usually, template projects have documentation for customization. For example, this blog uses stack. The issue I encountered with this template was adding a few icons that were not present in the theme. To customize it, I had to fork the original repository into my own repository and then make the necessary customizations.\nI found a template I like, but I don\u0026rsquo;t know how to get started. Typically, template projects come with a basic example site that you can refer to in order to understand how to use the template. In the case of stack, it has an \u0026rsquo;exampleSite\u0026rsquo; folder that contains content and config.yaml files. You can copy these files to your project directory to see how to get started.\n","date":"2023-10-20T00:00:00+08:00","permalink":"http://shawn1251.github.io/post/first-post/","title":"First Post with Hugo"}]